{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"teller Welcome to the teller 's website. There is an increasing need for transparency and fairness in Machine Learning (ML) models predictions. Consider for example a banker who has to explain to a client why his/her loan application is rejected, or a health professional who must explain what constitutes his/her diagnosis. Some ML models are indeed very accurate, but are considered to be hard to explain, relatively to popular linear models. Source of figure : James, Gareth, et al. An introduction to statistical learning. Vol. 112. New York: springer, 2013. We do not want to sacrifice this high accuracy to explainability. Hence: ML explainability . There are a lot of ML explainability tools out there, in the wild (don't take my word for it). The teller is a model-agnostic tool for ML explainability - agnostic, as long as this model possesses methods fit and predict . The teller 's philosophy is to rely on Taylor series to explain ML models predictions: a little increase in model's explanatory variables + a little decrease, and we can obtain approximate sensitivities of its predictions to changes in these explanatory variables. The teller 's source code is available on GitHub , and you can read posts about it in this blog . Looking for a specific function? You can also use the search function available in the navigation bar. Installing From Pypi, stable version: pip install the-teller From Github, for the development version: pip install git+https://github.com/thierrymoudiki/teller.git Quickstart Heterogeneity of marginal effects Significance of marginal effects Model comparison Classification Interactions Documentation For the Explainer For the Comparator Contributing Want to contribute to teller 's development on Github, read this !","title":"teller"},{"location":"#teller","text":"Welcome to the teller 's website. There is an increasing need for transparency and fairness in Machine Learning (ML) models predictions. Consider for example a banker who has to explain to a client why his/her loan application is rejected, or a health professional who must explain what constitutes his/her diagnosis. Some ML models are indeed very accurate, but are considered to be hard to explain, relatively to popular linear models. Source of figure : James, Gareth, et al. An introduction to statistical learning. Vol. 112. New York: springer, 2013. We do not want to sacrifice this high accuracy to explainability. Hence: ML explainability . There are a lot of ML explainability tools out there, in the wild (don't take my word for it). The teller is a model-agnostic tool for ML explainability - agnostic, as long as this model possesses methods fit and predict . The teller 's philosophy is to rely on Taylor series to explain ML models predictions: a little increase in model's explanatory variables + a little decrease, and we can obtain approximate sensitivities of its predictions to changes in these explanatory variables. The teller 's source code is available on GitHub , and you can read posts about it in this blog . Looking for a specific function? You can also use the search function available in the navigation bar.","title":"teller"},{"location":"#installing","text":"From Pypi, stable version: pip install the-teller From Github, for the development version: pip install git+https://github.com/thierrymoudiki/teller.git","title":"Installing"},{"location":"#quickstart","text":"Heterogeneity of marginal effects Significance of marginal effects Model comparison Classification Interactions","title":"Quickstart"},{"location":"#documentation","text":"For the Explainer For the Comparator","title":"Documentation"},{"location":"#contributing","text":"Want to contribute to teller 's development on Github, read this !","title":"Contributing"},{"location":"CONTRIBUTING/","text":"The teller 's Code of Conduct 1. Purpose A primary goal of this project is to be inclusive to the largest number of contributors, and most importantly with the most varied and diverse backgrounds possible . As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion, or lack of religion thereof. This code of conduct outlines our expectations for all those who participate to the project, as well as the consequences for unacceptable behavior. We invite all those who participate in, to help us create safe and positive experiences for everyone. 2. Open [Source/Culture/Tech] Citizenship A supplemental goal of this Code of Conduct is to encourage participants to recognize and strengthen the relationships between our actions and their effects on other participants. Communities mirror the societies in which they exist, and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society. 3. Expected Behavior The following behaviors are expected and requested of all contributors: Attempt collaboration before conflict . Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this project. Exercise consideration and respect in your speech and actions. Refrain from demeaning, discriminatory, or harassing behavior and speech. Be mindful of your surroundings and of your fellow participants. 4. Unacceptable Behavior The following behaviors are considered harassment and are unacceptable: Violence, threats of violence or violent language directed against another person. Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language. Posting or displaying sexually explicit or violent material. Posting or threatening to post other people's personally identifying information (\"doxing\"). Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability. Inappropriate photography or recording. Unwelcome sexual attention. This includes, sexualized comments or jokes. Deliberate intimidation, stalking or following (online or in person). Advocating for, or encouraging, any of the above behavior. 5. Consequences of Unacceptable Behavior Unacceptable behavior from any contributor will not be tolerated. Anyone asked to stop unacceptable behavior is expected to comply immediately. If a contributor engages in unacceptable behavior, appropriate action will be taken, up to and including a temporary ban or permanent expulsion without warning. 6. Scope We expect all contributors to abide by this Code of Conduct in all venues, online and in-person. 7. Contact info thierry.moudiki AT gmail.com 8. License and attribution Portions of text derived from the Citizen Code of Conduct .","title":"Contributing"},{"location":"CONTRIBUTING/#the-tellers-code-of-conduct","text":"","title":"The teller's Code of Conduct"},{"location":"CONTRIBUTING/#1-purpose","text":"A primary goal of this project is to be inclusive to the largest number of contributors, and most importantly with the most varied and diverse backgrounds possible . As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion, or lack of religion thereof. This code of conduct outlines our expectations for all those who participate to the project, as well as the consequences for unacceptable behavior. We invite all those who participate in, to help us create safe and positive experiences for everyone.","title":"1. Purpose"},{"location":"CONTRIBUTING/#2-open-sourceculturetech-citizenship","text":"A supplemental goal of this Code of Conduct is to encourage participants to recognize and strengthen the relationships between our actions and their effects on other participants. Communities mirror the societies in which they exist, and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society.","title":"2. Open [Source/Culture/Tech] Citizenship"},{"location":"CONTRIBUTING/#3-expected-behavior","text":"The following behaviors are expected and requested of all contributors: Attempt collaboration before conflict . Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this project. Exercise consideration and respect in your speech and actions. Refrain from demeaning, discriminatory, or harassing behavior and speech. Be mindful of your surroundings and of your fellow participants.","title":"3. Expected Behavior"},{"location":"CONTRIBUTING/#4-unacceptable-behavior","text":"The following behaviors are considered harassment and are unacceptable: Violence, threats of violence or violent language directed against another person. Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language. Posting or displaying sexually explicit or violent material. Posting or threatening to post other people's personally identifying information (\"doxing\"). Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability. Inappropriate photography or recording. Unwelcome sexual attention. This includes, sexualized comments or jokes. Deliberate intimidation, stalking or following (online or in person). Advocating for, or encouraging, any of the above behavior.","title":"4. Unacceptable Behavior"},{"location":"CONTRIBUTING/#5-consequences-of-unacceptable-behavior","text":"Unacceptable behavior from any contributor will not be tolerated. Anyone asked to stop unacceptable behavior is expected to comply immediately. If a contributor engages in unacceptable behavior, appropriate action will be taken, up to and including a temporary ban or permanent expulsion without warning.","title":"5. Consequences of Unacceptable Behavior"},{"location":"CONTRIBUTING/#6-scope","text":"We expect all contributors to abide by this Code of Conduct in all venues, online and in-person.","title":"6. Scope"},{"location":"CONTRIBUTING/#7-contact-info","text":"thierry.moudiki AT gmail.com","title":"7. Contact info"},{"location":"CONTRIBUTING/#8-license-and-attribution","text":"Portions of text derived from the Citizen Code of Conduct .","title":"8. License and attribution"},{"location":"LICENSE/","text":"The Clear BSD License Copyright (c) [2019] [Thierry Moudiki] All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"quickstart/","text":"Quickstart Heterogeneity of marginal effects Significance of marginal effects Model comparison Classification Interactions","title":"Quickstart examples"},{"location":"quickstart/#quickstart","text":"Heterogeneity of marginal effects Significance of marginal effects Model comparison Classification Interactions","title":"Quickstart"},{"location":"documentation/comparator/","text":"Comparator Compare and explain predictions of two fitted models [source] Comparator teller.Comparator(obj1, obj2) Class Comparator: Compare two models obj1 , obj2 (\"estimators\") based their predictions. Attributes: obj1: an object; fitted object containing methods `fit` and `predict`. obj2: an object; fitted object containing methods `fit` and `predict`. [source] summary Comparator.summary() Summarise results of model comparison Args: None","title":"Comparator"},{"location":"documentation/comparator/#comparator","text":"Compare and explain predictions of two fitted models [source]","title":"Comparator"},{"location":"documentation/comparator/#comparator_1","text":"teller.Comparator(obj1, obj2) Class Comparator: Compare two models obj1 , obj2 (\"estimators\") based their predictions. Attributes: obj1: an object; fitted object containing methods `fit` and `predict`. obj2: an object; fitted object containing methods `fit` and `predict`. [source]","title":"Comparator"},{"location":"documentation/comparator/#summary","text":"Comparator.summary() Summarise results of model comparison Args: None","title":"summary"},{"location":"documentation/explainer/","text":"Explainer Explain predictions for a fitted model [source] Explainer teller.Explainer(obj, n_jobs=None, y_class=0, normalize=False) Class Explainer: effects of features on the response. Attributes: obj: an object; fitted object containing methods `fit` and `predict` n_jobs: an integer; number of jobs for parallel computing y_class: an integer; class whose probability has to be explained (for classification only) normalize: a boolean; whether the features must be normalized or not (changes the effects) [source] fit Explainer.fit( X, y, X_names, y_name, method=\"avg\", type_ci=\"jackknife\", scoring=None, level=95, col_inters=None ) Fit the explainer's attribute obj to training data (X, y). Args: X: array-like, shape = [n_samples, n_features]; Training vectors, where n_samples is the number of samples and n_features is the number of features. y: array-like, shape = [n_samples, ]; Target values. X_names: {array-like}, shape = [n_features, ]; Column names (strings) for training vectors. y_names: str; Column name (string) for vector of target values. method: str; Type of summary requested for effects. Either `avg` (for average effects), `inters` (for interactions) or `ci` (for effects including confidence intervals around them). type_ci: str; Type of resampling for `method == 'ci'` (confidence intervals around effects). Either `jackknife` bootsrapping or `gaussian` (gaussian white noise with standard deviation equal to `0.01` applied to the features). scoring: str; measure of errors must be in (\"explained_variance\", \"neg_mean_absolute_error\", \"neg_mean_squared_error\", \"neg_mean_squared_log_error\", \"neg_median_absolute_error\", \"r2\", \"rmse\") (default: \"rmse\"). level: int; Level of confidence required for `method == 'ci'` (in %). col_inters: str; Name of column for computing interactions. [source] summary Explainer.summary() Summarise results a method in class Explainer Args: None","title":"Explainer"},{"location":"documentation/explainer/#explainer","text":"Explain predictions for a fitted model [source]","title":"Explainer"},{"location":"documentation/explainer/#explainer_1","text":"teller.Explainer(obj, n_jobs=None, y_class=0, normalize=False) Class Explainer: effects of features on the response. Attributes: obj: an object; fitted object containing methods `fit` and `predict` n_jobs: an integer; number of jobs for parallel computing y_class: an integer; class whose probability has to be explained (for classification only) normalize: a boolean; whether the features must be normalized or not (changes the effects) [source]","title":"Explainer"},{"location":"documentation/explainer/#fit","text":"Explainer.fit( X, y, X_names, y_name, method=\"avg\", type_ci=\"jackknife\", scoring=None, level=95, col_inters=None ) Fit the explainer's attribute obj to training data (X, y). Args: X: array-like, shape = [n_samples, n_features]; Training vectors, where n_samples is the number of samples and n_features is the number of features. y: array-like, shape = [n_samples, ]; Target values. X_names: {array-like}, shape = [n_features, ]; Column names (strings) for training vectors. y_names: str; Column name (string) for vector of target values. method: str; Type of summary requested for effects. Either `avg` (for average effects), `inters` (for interactions) or `ci` (for effects including confidence intervals around them). type_ci: str; Type of resampling for `method == 'ci'` (confidence intervals around effects). Either `jackknife` bootsrapping or `gaussian` (gaussian white noise with standard deviation equal to `0.01` applied to the features). scoring: str; measure of errors must be in (\"explained_variance\", \"neg_mean_absolute_error\", \"neg_mean_squared_error\", \"neg_mean_squared_log_error\", \"neg_median_absolute_error\", \"r2\", \"rmse\") (default: \"rmse\"). level: int; Level of confidence required for `method == 'ci'` (in %). col_inters: str; Name of column for computing interactions. [source]","title":"fit"},{"location":"documentation/explainer/#summary","text":"Explainer.summary() Summarise results a method in class Explainer Args: None","title":"summary"}]}