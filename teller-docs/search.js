window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"teller": {"fullname": "teller", "modulename": "teller", "kind": "module", "doc": "<p></p>\n"}, "teller.Comparator": {"fullname": "teller.Comparator", "modulename": "teller", "qualname": "Comparator", "kind": "class", "doc": "<p>Class Comparator: Compare two models <code>obj1</code>, <code>obj2</code> (\"estimators\") based their predictions.</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj1: an object;\n    fitted object containing methods `fit` and `predict`.\n\nobj2: an object;\n   fitted object containing methods `fit` and `predict`.\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator"}, "teller.Comparator.__init__": {"fullname": "teller.Comparator.__init__", "modulename": "teller", "qualname": "Comparator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj1</span>, </span><span class=\"param\"><span class=\"n\">obj2</span></span>)</span>"}, "teller.Comparator.obj1": {"fullname": "teller.Comparator.obj1", "modulename": "teller", "qualname": "Comparator.obj1", "kind": "variable", "doc": "<p></p>\n"}, "teller.Comparator.obj2": {"fullname": "teller.Comparator.obj2", "modulename": "teller", "qualname": "Comparator.obj2", "kind": "variable", "doc": "<p></p>\n"}, "teller.Comparator.summary": {"fullname": "teller.Comparator.summary", "modulename": "teller", "qualname": "Comparator.summary", "kind": "function", "doc": "<p>Summarise results of model comparison</p>\n\n<p>Args:</p>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.Explainer": {"fullname": "teller.Explainer", "modulename": "teller", "qualname": "Explainer", "kind": "class", "doc": "<p>Class Explainer: effects of features on the response.</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj: an object;\n    fitted object containing methods `fit` and `predict`\n\nn_jobs: an integer;\n    number of jobs for parallel computing\n\ny_class: an integer;\n    class whose probability has to be explained (for classification only, default is 0)\n\nnormalize: a boolean;\n    whether the features must be normalized or not (changes the effects)\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator"}, "teller.Explainer.__init__": {"fullname": "teller.Explainer.__init__", "modulename": "teller", "qualname": "Explainer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">y_class</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, "teller.Explainer.obj": {"fullname": "teller.Explainer.obj", "modulename": "teller", "qualname": "Explainer.obj", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.n_jobs": {"fullname": "teller.Explainer.n_jobs", "modulename": "teller", "qualname": "Explainer.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.y_mean_": {"fullname": "teller.Explainer.y_mean_", "modulename": "teller", "qualname": "Explainer.y_mean_", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.effects_": {"fullname": "teller.Explainer.effects_", "modulename": "teller", "qualname": "Explainer.effects_", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.residuals_": {"fullname": "teller.Explainer.residuals_", "modulename": "teller", "qualname": "Explainer.residuals_", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.r_squared_": {"fullname": "teller.Explainer.r_squared_", "modulename": "teller", "qualname": "Explainer.r_squared_", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.adj_r_squared_": {"fullname": "teller.Explainer.adj_r_squared_", "modulename": "teller", "qualname": "Explainer.adj_r_squared_", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.ci_": {"fullname": "teller.Explainer.ci_", "modulename": "teller", "qualname": "Explainer.ci_", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.ci_inters_": {"fullname": "teller.Explainer.ci_inters_", "modulename": "teller", "qualname": "Explainer.ci_inters_", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.type_fit": {"fullname": "teller.Explainer.type_fit", "modulename": "teller", "qualname": "Explainer.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.y_class": {"fullname": "teller.Explainer.y_class", "modulename": "teller", "qualname": "Explainer.y_class", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.normalize": {"fullname": "teller.Explainer.normalize", "modulename": "teller", "qualname": "Explainer.normalize", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.type_ci": {"fullname": "teller.Explainer.type_ci", "modulename": "teller", "qualname": "Explainer.type_ci", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.col_inters": {"fullname": "teller.Explainer.col_inters", "modulename": "teller", "qualname": "Explainer.col_inters", "kind": "variable", "doc": "<p></p>\n"}, "teller.Explainer.fit": {"fullname": "teller.Explainer.fit", "modulename": "teller", "qualname": "Explainer.fit", "kind": "function", "doc": "<p>Fit the explainer's attribute <code>obj</code> to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: array-like, shape = [n_samples, n_features];\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples, ]; Target values.\n\nX_names: {array-like}, shape = [n_features, ];\n    Column names (strings) for training vectors (default\n    is None, and not used if X is a data frame).\n\nmethod: str;\n    Type of summary requested for effects. Either `avg`\n    (for average effects), `inters` (for interactions)\n    or `ci` (for effects including confidence intervals\n    around them).\n\ntype_ci: str;\n    Type of resampling for `method == 'ci'` (confidence\n    intervals around effects). Either `jackknife`\n    bootsrapping or `gaussian` (gaussian white noise with\n    standard deviation equal to `0.01` applied to the\n    features).\n\nscoring: str;\n    measure of errors must be in (\"explained_variance\",\n    \"neg_mean_absolute_error\", \"neg_mean_squared_error\",\n    \"neg_mean_squared_log_error\", \"neg_median_absolute_error\",\n    \"r2\", \"rmse\") (default: \"rmse\").\n\nlevel: int; Level of confidence required for\n    `method == 'ci'` (in %).\n\ncol_inters: str; Name of column for computing interactions.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">X_names</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;avg&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_ci</span><span class=\"o\">=</span><span class=\"s1\">&#39;jackknife&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>,</span><span class=\"param\">\t<span class=\"n\">col_inters</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.Explainer.summary": {"fullname": "teller.Explainer.summary", "modulename": "teller", "qualname": "Explainer.summary", "kind": "function", "doc": "<p>Summarise results</p>\n\n<pre><code>a method in class Explainer\n</code></pre>\n\n<p>Args:</p>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.Explainer.plot": {"fullname": "teller.Explainer.plot", "modulename": "teller", "qualname": "Explainer.plot", "kind": "function", "doc": "<p>Plot average effects, heterogeneity of effects, ...</p>\n\n<p>Args:</p>\n\n<pre><code>what: a string;\n    if .\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">what</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.Explainer.get_individual_effects": {"fullname": "teller.Explainer.get_individual_effects", "modulename": "teller", "qualname": "Explainer.get_individual_effects", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.Explainer.set_fit_request": {"fullname": "teller.Explainer.set_fit_request", "modulename": "teller", "qualname": "Explainer.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.PredictionInterval": {"fullname": "teller.PredictionInterval", "modulename": "teller", "qualname": "PredictionInterval", "kind": "class", "doc": "<p>Class PredictionInterval: Obtain prediction intervals.</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj: an object;\n    fitted object containing methods `fit` and `predict`\n\nmethod: a string;\n    method for constructing the prediction intervals.\n    Currently \"splitconformal\" (default) and \"localconformal\"\n\nlevel: a float;\n    Confidence level for prediction intervals. Default is 0.95,\n    equivalent to a miscoverage error of 0.05\n\nseed: an integer;\n    Reproducibility of fit (there's a random split between fitting and calibration data)\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator, sklearn.base.RegressorMixin"}, "teller.PredictionInterval.__init__": {"fullname": "teller.PredictionInterval.__init__", "modulename": "teller", "qualname": "PredictionInterval.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;splitconformal&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mf\">0.95</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, "teller.PredictionInterval.obj": {"fullname": "teller.PredictionInterval.obj", "modulename": "teller", "qualname": "PredictionInterval.obj", "kind": "variable", "doc": "<p></p>\n"}, "teller.PredictionInterval.method": {"fullname": "teller.PredictionInterval.method", "modulename": "teller", "qualname": "PredictionInterval.method", "kind": "variable", "doc": "<p></p>\n"}, "teller.PredictionInterval.level": {"fullname": "teller.PredictionInterval.level", "modulename": "teller", "qualname": "PredictionInterval.level", "kind": "variable", "doc": "<p></p>\n"}, "teller.PredictionInterval.seed": {"fullname": "teller.PredictionInterval.seed", "modulename": "teller", "qualname": "PredictionInterval.seed", "kind": "variable", "doc": "<p></p>\n"}, "teller.PredictionInterval.quantile_": {"fullname": "teller.PredictionInterval.quantile_", "modulename": "teller", "qualname": "PredictionInterval.quantile_", "kind": "variable", "doc": "<p></p>\n"}, "teller.PredictionInterval.icp_": {"fullname": "teller.PredictionInterval.icp_", "modulename": "teller", "qualname": "PredictionInterval.icp_", "kind": "variable", "doc": "<p></p>\n"}, "teller.PredictionInterval.fit": {"fullname": "teller.PredictionInterval.fit", "modulename": "teller", "qualname": "PredictionInterval.fit", "kind": "function", "doc": "<p>Fit the <code>method</code> to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: array-like, shape = [n_samples, n_features];\n    Training set vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples, ]; Target values.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.PredictionInterval.predict": {"fullname": "teller.PredictionInterval.predict", "modulename": "teller", "qualname": "PredictionInterval.predict", "kind": "function", "doc": "<p>Obtain predictions and prediction intervals</p>\n\n<p>Args:</p>\n\n<pre><code>X: array-like, shape = [n_samples, n_features];\n    Testing set vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_pi: boolean\n    Whether the prediction interval is returned or not.\n    Default is False, for compatibility with other _estimators_.\n    If True, a tuple containing the predictions + lower and upper\n    bounds is returned.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_pi</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.PredictionInterval.set_predict_request": {"fullname": "teller.PredictionInterval.set_predict_request", "modulename": "teller", "qualname": "PredictionInterval.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.PredictionInterval.set_score_request": {"fullname": "teller.PredictionInterval.set_score_request", "modulename": "teller", "qualname": "PredictionInterval.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.demo": {"fullname": "teller.demo", "modulename": "teller.demo", "kind": "module", "doc": "<p></p>\n"}, "teller.explainer": {"fullname": "teller.explainer", "modulename": "teller.explainer", "kind": "module", "doc": "<p></p>\n"}, "teller.explainer.Comparator": {"fullname": "teller.explainer.Comparator", "modulename": "teller.explainer", "qualname": "Comparator", "kind": "class", "doc": "<p>Class Comparator: Compare two models <code>obj1</code>, <code>obj2</code> (\"estimators\") based their predictions.</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj1: an object;\n    fitted object containing methods `fit` and `predict`.\n\nobj2: an object;\n   fitted object containing methods `fit` and `predict`.\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator"}, "teller.explainer.Comparator.__init__": {"fullname": "teller.explainer.Comparator.__init__", "modulename": "teller.explainer", "qualname": "Comparator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj1</span>, </span><span class=\"param\"><span class=\"n\">obj2</span></span>)</span>"}, "teller.explainer.Comparator.obj1": {"fullname": "teller.explainer.Comparator.obj1", "modulename": "teller.explainer", "qualname": "Comparator.obj1", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Comparator.obj2": {"fullname": "teller.explainer.Comparator.obj2", "modulename": "teller.explainer", "qualname": "Comparator.obj2", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Comparator.summary": {"fullname": "teller.explainer.Comparator.summary", "modulename": "teller.explainer", "qualname": "Comparator.summary", "kind": "function", "doc": "<p>Summarise results of model comparison</p>\n\n<p>Args:</p>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.explainer.Explainer": {"fullname": "teller.explainer.Explainer", "modulename": "teller.explainer", "qualname": "Explainer", "kind": "class", "doc": "<p>Class Explainer: effects of features on the response.</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj: an object;\n    fitted object containing methods `fit` and `predict`\n\nn_jobs: an integer;\n    number of jobs for parallel computing\n\ny_class: an integer;\n    class whose probability has to be explained (for classification only, default is 0)\n\nnormalize: a boolean;\n    whether the features must be normalized or not (changes the effects)\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator"}, "teller.explainer.Explainer.__init__": {"fullname": "teller.explainer.Explainer.__init__", "modulename": "teller.explainer", "qualname": "Explainer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">y_class</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, "teller.explainer.Explainer.obj": {"fullname": "teller.explainer.Explainer.obj", "modulename": "teller.explainer", "qualname": "Explainer.obj", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.n_jobs": {"fullname": "teller.explainer.Explainer.n_jobs", "modulename": "teller.explainer", "qualname": "Explainer.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.y_mean_": {"fullname": "teller.explainer.Explainer.y_mean_", "modulename": "teller.explainer", "qualname": "Explainer.y_mean_", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.effects_": {"fullname": "teller.explainer.Explainer.effects_", "modulename": "teller.explainer", "qualname": "Explainer.effects_", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.residuals_": {"fullname": "teller.explainer.Explainer.residuals_", "modulename": "teller.explainer", "qualname": "Explainer.residuals_", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.r_squared_": {"fullname": "teller.explainer.Explainer.r_squared_", "modulename": "teller.explainer", "qualname": "Explainer.r_squared_", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.adj_r_squared_": {"fullname": "teller.explainer.Explainer.adj_r_squared_", "modulename": "teller.explainer", "qualname": "Explainer.adj_r_squared_", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.ci_": {"fullname": "teller.explainer.Explainer.ci_", "modulename": "teller.explainer", "qualname": "Explainer.ci_", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.ci_inters_": {"fullname": "teller.explainer.Explainer.ci_inters_", "modulename": "teller.explainer", "qualname": "Explainer.ci_inters_", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.type_fit": {"fullname": "teller.explainer.Explainer.type_fit", "modulename": "teller.explainer", "qualname": "Explainer.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.y_class": {"fullname": "teller.explainer.Explainer.y_class", "modulename": "teller.explainer", "qualname": "Explainer.y_class", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.normalize": {"fullname": "teller.explainer.Explainer.normalize", "modulename": "teller.explainer", "qualname": "Explainer.normalize", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.type_ci": {"fullname": "teller.explainer.Explainer.type_ci", "modulename": "teller.explainer", "qualname": "Explainer.type_ci", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.col_inters": {"fullname": "teller.explainer.Explainer.col_inters", "modulename": "teller.explainer", "qualname": "Explainer.col_inters", "kind": "variable", "doc": "<p></p>\n"}, "teller.explainer.Explainer.fit": {"fullname": "teller.explainer.Explainer.fit", "modulename": "teller.explainer", "qualname": "Explainer.fit", "kind": "function", "doc": "<p>Fit the explainer's attribute <code>obj</code> to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: array-like, shape = [n_samples, n_features];\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples, ]; Target values.\n\nX_names: {array-like}, shape = [n_features, ];\n    Column names (strings) for training vectors (default\n    is None, and not used if X is a data frame).\n\nmethod: str;\n    Type of summary requested for effects. Either `avg`\n    (for average effects), `inters` (for interactions)\n    or `ci` (for effects including confidence intervals\n    around them).\n\ntype_ci: str;\n    Type of resampling for `method == 'ci'` (confidence\n    intervals around effects). Either `jackknife`\n    bootsrapping or `gaussian` (gaussian white noise with\n    standard deviation equal to `0.01` applied to the\n    features).\n\nscoring: str;\n    measure of errors must be in (\"explained_variance\",\n    \"neg_mean_absolute_error\", \"neg_mean_squared_error\",\n    \"neg_mean_squared_log_error\", \"neg_median_absolute_error\",\n    \"r2\", \"rmse\") (default: \"rmse\").\n\nlevel: int; Level of confidence required for\n    `method == 'ci'` (in %).\n\ncol_inters: str; Name of column for computing interactions.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">X_names</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;avg&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_ci</span><span class=\"o\">=</span><span class=\"s1\">&#39;jackknife&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>,</span><span class=\"param\">\t<span class=\"n\">col_inters</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.explainer.Explainer.summary": {"fullname": "teller.explainer.Explainer.summary", "modulename": "teller.explainer", "qualname": "Explainer.summary", "kind": "function", "doc": "<p>Summarise results</p>\n\n<pre><code>a method in class Explainer\n</code></pre>\n\n<p>Args:</p>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.explainer.Explainer.plot": {"fullname": "teller.explainer.Explainer.plot", "modulename": "teller.explainer", "qualname": "Explainer.plot", "kind": "function", "doc": "<p>Plot average effects, heterogeneity of effects, ...</p>\n\n<p>Args:</p>\n\n<pre><code>what: a string;\n    if .\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">what</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.explainer.Explainer.get_individual_effects": {"fullname": "teller.explainer.Explainer.get_individual_effects", "modulename": "teller.explainer", "qualname": "Explainer.get_individual_effects", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.explainer.Explainer.set_fit_request": {"fullname": "teller.explainer.Explainer.set_fit_request", "modulename": "teller.explainer", "qualname": "Explainer.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist": {"fullname": "teller.nonconformist", "modulename": "teller.nonconformist", "kind": "module", "doc": "<p>docstring</p>\n"}, "teller.nonconformist.AbsErrorErrFunc": {"fullname": "teller.nonconformist.AbsErrorErrFunc", "modulename": "teller.nonconformist", "qualname": "AbsErrorErrFunc", "kind": "class", "doc": "<p>Calculates absolute error nonconformity for regression problems.</p>\n\n<p>For each correct output in <code>y</code>, nonconformity is defined as</p>\n\n<p>$$| y_i - \\hat{y}_i |$$</p>\n", "bases": "teller.nonconformist.nc.RegressionErrFunc"}, "teller.nonconformist.AbsErrorErrFunc.apply": {"fullname": "teller.nonconformist.AbsErrorErrFunc.apply", "modulename": "teller.nonconformist", "qualname": "AbsErrorErrFunc.apply", "kind": "function", "doc": "<p>Apply the nonconformity function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>prediction : numpy array of shape [n_samples, n_classes]\n    Class probability estimates for each sample.</p>\n\n<p>y : numpy array of shape [n_samples]\n    True output labels of each sample.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>nc : numpy array of shape [n_samples]\n    Nonconformity scores of the samples.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prediction</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"fullname": "teller.nonconformist.AbsErrorErrFunc.apply_inverse", "modulename": "teller.nonconformist", "qualname": "AbsErrorErrFunc.apply_inverse", "kind": "function", "doc": "<p>Apply the inverse of the nonconformity function (i.e.,\ncalculate prediction interval).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>nc : numpy array of shape [n_calibration_samples]\n    Nonconformity scores obtained for conformal predictor.</p>\n\n<p>significance : float\n    Significance level (0, 1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>interval : numpy array of shape [n_samples, 2]\n    Minimum and maximum interval boundaries for each prediction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nc</span>, </span><span class=\"param\"><span class=\"n\">significance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.QuantileRegErrFunc": {"fullname": "teller.nonconformist.QuantileRegErrFunc", "modulename": "teller.nonconformist", "qualname": "QuantileRegErrFunc", "kind": "class", "doc": "<p>Calculates conformalized quantile regression error.</p>\n\n<p>For each correct output in <code>y</code>, nonconformity is defined as</p>\n\n<p>$$max{\\hat{q}_low - y, y - \\hat{q}_high}$$</p>\n", "bases": "teller.nonconformist.nc.RegressionErrFunc"}, "teller.nonconformist.QuantileRegErrFunc.apply": {"fullname": "teller.nonconformist.QuantileRegErrFunc.apply", "modulename": "teller.nonconformist", "qualname": "QuantileRegErrFunc.apply", "kind": "function", "doc": "<p>Apply the nonconformity function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>prediction : numpy array of shape [n_samples, n_classes]\n    Class probability estimates for each sample.</p>\n\n<p>y : numpy array of shape [n_samples]\n    True output labels of each sample.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>nc : numpy array of shape [n_samples]\n    Nonconformity scores of the samples.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prediction</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"fullname": "teller.nonconformist.QuantileRegErrFunc.apply_inverse", "modulename": "teller.nonconformist", "qualname": "QuantileRegErrFunc.apply_inverse", "kind": "function", "doc": "<p>Apply the inverse of the nonconformity function (i.e.,\ncalculate prediction interval).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>nc : numpy array of shape [n_calibration_samples]\n    Nonconformity scores obtained for conformal predictor.</p>\n\n<p>significance : float\n    Significance level (0, 1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>interval : numpy array of shape [n_samples, 2]\n    Minimum and maximum interval boundaries for each prediction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nc</span>, </span><span class=\"param\"><span class=\"n\">significance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.RegressorAdapter": {"fullname": "teller.nonconformist.RegressorAdapter", "modulename": "teller.nonconformist", "qualname": "RegressorAdapter", "kind": "class", "doc": "<p>Base class for all estimators in scikit-learn.</p>\n\n<p>Inheriting from this class provides default implementations of:</p>\n\n<ul>\n<li>setting and getting parameters used by <code>GridSearchCV</code> and friends;</li>\n<li>textual and HTML representation displayed in terminals and IDEs;</li>\n<li>estimator serialization;</li>\n<li>parameters validation;</li>\n<li>data validation;</li>\n<li>feature names validation.</li>\n</ul>\n\n<p>Read more in the :ref:<code>User Guide &lt;rolling_your_own_estimator&gt;</code>.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>All estimators should specify all the parameters that can be set\nat the class level in their <code>__init__</code> as explicit keyword\narguments (no <code>*args</code> or <code>**kwargs</code>).</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseEstimator</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyEstimator</span><span class=\"p\">(</span><span class=\"n\">BaseEstimator</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">param</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">fit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_fitted_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span> <span class=\"o\">=</span> <span class=\"n\">MyEstimator</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">get_params</span><span class=\"p\">()</span>\n<span class=\"go\">{&#39;param&#39;: 2}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"go\">array([2, 2, 2])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">set_params</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"go\">array([3, 3, 3])</span>\n</code></pre>\n</div>\n", "bases": "teller.nonconformist.base.BaseModelAdapter"}, "teller.nonconformist.RegressorAdapter.__init__": {"fullname": "teller.nonconformist.RegressorAdapter.__init__", "modulename": "teller.nonconformist", "qualname": "RegressorAdapter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">fit_params</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"fullname": "teller.nonconformist.RegressorAdapter.set_fit_request", "modulename": "teller.nonconformist", "qualname": "RegressorAdapter.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"fullname": "teller.nonconformist.RegressorAdapter.set_predict_request", "modulename": "teller.nonconformist", "qualname": "RegressorAdapter.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.RegressorNc": {"fullname": "teller.nonconformist.RegressorNc", "modulename": "teller.nonconformist", "qualname": "RegressorNc", "kind": "class", "doc": "<p>Nonconformity scorer using an underlying regression model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>model : RegressorAdapter\n    Underlying regression model used for calculating nonconformity scores.</p>\n\n<p>err_func : RegressionErrFunc\n    Error function object.</p>\n\n<p>normalizer : BaseScorer\n    Normalization model.</p>\n\n<p>beta : float\n    Normalization smoothing parameter. As the beta-value increases,\n    the normalized nonconformity function approaches a non-normalized\n    equivalent.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>model : RegressorAdapter\n    Underlying model object.</p>\n\n<p>err_func : RegressionErrFunc\n    Scorer function used to calculate nonconformity scores.</p>\n\n<h2 id=\"see-also\">See also</h2>\n\n<p>ProbEstClassifierNc, NormalizedRegressorNc</p>\n", "bases": "teller.nonconformist.nc.BaseModelNc"}, "teller.nonconformist.RegressorNc.__init__": {"fullname": "teller.nonconformist.RegressorNc.__init__", "modulename": "teller.nonconformist", "qualname": "RegressorNc.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">err_func</span><span class=\"o\">=&lt;</span><span class=\"n\">teller</span><span class=\"o\">.</span><span class=\"n\">nonconformist</span><span class=\"o\">.</span><span class=\"n\">nc</span><span class=\"o\">.</span><span class=\"n\">AbsErrorErrFunc</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">normalizer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span>)</span>"}, "teller.nonconformist.RegressorNc.predict": {"fullname": "teller.nonconformist.RegressorNc.predict", "modulename": "teller.nonconformist", "qualname": "RegressorNc.predict", "kind": "function", "doc": "<p>Constructs prediction intervals for a set of test examples.</p>\n\n<p>Predicts the output of each test pattern using the underlying model,\nand applies the (partial) inverse nonconformity function to each\nprediction, resulting in a prediction interval for each test pattern.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>x : numpy array of shape [n_samples, n_features]\n    Inputs of patters for which to predict output values.</p>\n\n<p>significance : float\n    Significance level (maximum allowed error rate) of predictions.\n    Should be a float between 0 and 1. If <code>None</code>, then intervals for\n    all significance levels (0.01, 0.02, ..., 0.99) are output in a\n    3d-matrix.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>p : numpy array of shape [n_samples, 2] or [n_samples, 2, 99]\n    If significance is <code>None</code>, then p contains the interval (minimum\n    and maximum boundaries) for each test pattern, and each significance\n    level (0.01, 0.02, ..., 0.99). If significance is a float between\n    0 and 1, then p contains the prediction intervals (minimum and\n    maximum     boundaries) for the set of test patterns at the chosen\n    significance level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">nc</span>, </span><span class=\"param\"><span class=\"n\">significance</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.RegressorNc.set_fit_request": {"fullname": "teller.nonconformist.RegressorNc.set_fit_request", "modulename": "teller.nonconformist", "qualname": "RegressorNc.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.RegressorNc.set_predict_request": {"fullname": "teller.nonconformist.RegressorNc.set_predict_request", "modulename": "teller.nonconformist", "qualname": "RegressorNc.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.RegressorNc.set_score_request": {"fullname": "teller.nonconformist.RegressorNc.set_score_request", "modulename": "teller.nonconformist", "qualname": "RegressorNc.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.RegressorNormalizer": {"fullname": "teller.nonconformist.RegressorNormalizer", "modulename": "teller.nonconformist", "qualname": "RegressorNormalizer", "kind": "class", "doc": "<p>Base class for all estimators in scikit-learn.</p>\n\n<p>Inheriting from this class provides default implementations of:</p>\n\n<ul>\n<li>setting and getting parameters used by <code>GridSearchCV</code> and friends;</li>\n<li>textual and HTML representation displayed in terminals and IDEs;</li>\n<li>estimator serialization;</li>\n<li>parameters validation;</li>\n<li>data validation;</li>\n<li>feature names validation.</li>\n</ul>\n\n<p>Read more in the :ref:<code>User Guide &lt;rolling_your_own_estimator&gt;</code>.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>All estimators should specify all the parameters that can be set\nat the class level in their <code>__init__</code> as explicit keyword\narguments (no <code>*args</code> or <code>**kwargs</code>).</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseEstimator</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyEstimator</span><span class=\"p\">(</span><span class=\"n\">BaseEstimator</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">param</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">fit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_fitted_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span> <span class=\"o\">=</span> <span class=\"n\">MyEstimator</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">get_params</span><span class=\"p\">()</span>\n<span class=\"go\">{&#39;param&#39;: 2}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"go\">array([2, 2, 2])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">set_params</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"go\">array([3, 3, 3])</span>\n</code></pre>\n</div>\n", "bases": "teller.nonconformist.nc.BaseScorer"}, "teller.nonconformist.RegressorNormalizer.__init__": {"fullname": "teller.nonconformist.RegressorNormalizer.__init__", "modulename": "teller.nonconformist", "qualname": "RegressorNormalizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_model</span>, </span><span class=\"param\"><span class=\"n\">normalizer_model</span>, </span><span class=\"param\"><span class=\"n\">err_func</span></span>)</span>"}, "teller.nonconformist.RegressorNormalizer.base_model": {"fullname": "teller.nonconformist.RegressorNormalizer.base_model", "modulename": "teller.nonconformist", "qualname": "RegressorNormalizer.base_model", "kind": "variable", "doc": "<p></p>\n"}, "teller.nonconformist.RegressorNormalizer.normalizer_model": {"fullname": "teller.nonconformist.RegressorNormalizer.normalizer_model", "modulename": "teller.nonconformist", "qualname": "RegressorNormalizer.normalizer_model", "kind": "variable", "doc": "<p></p>\n"}, "teller.nonconformist.RegressorNormalizer.err_func": {"fullname": "teller.nonconformist.RegressorNormalizer.err_func", "modulename": "teller.nonconformist", "qualname": "RegressorNormalizer.err_func", "kind": "variable", "doc": "<p></p>\n"}, "teller.nonconformist.RegressorNormalizer.fit": {"fullname": "teller.nonconformist.RegressorNormalizer.fit", "modulename": "teller.nonconformist", "qualname": "RegressorNormalizer.fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.RegressorNormalizer.score": {"fullname": "teller.nonconformist.RegressorNormalizer.score", "modulename": "teller.nonconformist", "qualname": "RegressorNormalizer.score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"fullname": "teller.nonconformist.RegressorNormalizer.set_fit_request", "modulename": "teller.nonconformist", "qualname": "RegressorNormalizer.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"fullname": "teller.nonconformist.RegressorNormalizer.set_score_request", "modulename": "teller.nonconformist", "qualname": "RegressorNormalizer.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.IcpRegressor": {"fullname": "teller.nonconformist.IcpRegressor", "modulename": "teller.nonconformist", "qualname": "IcpRegressor", "kind": "class", "doc": "<p>Inductive conformal regressor.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>nc_function : BaseScorer\n        Nonconformity scorer object used to calculate nonconformity of\n        calibration examples and test patterns. Should implement <code>fit(x, y)</code>,\n        <code>calc_nc(x, y)</code> and <code>predict(x, nc_scores, significance)</code>.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>cal_x : numpy array of shape [n_cal_examples, n_features]\n        Inputs of calibration set.</p>\n\n<p>cal_y : numpy array of shape [n_cal_examples]\n        Outputs of calibration set.</p>\n\n<p>nc_function : BaseScorer\n        Nonconformity scorer object used to calculate nonconformity scores.</p>\n\n<h2 id=\"see-also\">See also</h2>\n\n<p>IcpClassifier</p>\n\n<h2 id=\"references\">References</h2>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_boston</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.tree</span> <span class=\"kn\">import</span> <span class=\"n\">DecisionTreeRegressor</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">nonconformist.base</span> <span class=\"kn\">import</span> <span class=\"n\">RegressorAdapter</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">nonconformist.icp</span> <span class=\"kn\">import</span> <span class=\"n\">IcpRegressor</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">nonconformist.nc</span> <span class=\"kn\">import</span> <span class=\"n\">RegressorNc</span><span class=\"p\">,</span> <span class=\"n\">AbsErrorErrFunc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">boston</span> <span class=\"o\">=</span> <span class=\"n\">load_boston</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">permutation</span><span class=\"p\">(</span><span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">idx</span><span class=\"p\">[:</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cal</span> <span class=\"o\">=</span> <span class=\"n\">idx</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">):</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">idx</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">idx</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">idx</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">):]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">RegressorAdapter</span><span class=\"p\">(</span><span class=\"n\">DecisionTreeRegressor</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nc</span> <span class=\"o\">=</span> <span class=\"n\">RegressorNc</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">AbsErrorErrFunc</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">icp</span> <span class=\"o\">=</span> <span class=\"n\">IcpRegressor</span><span class=\"p\">(</span><span class=\"n\">nc</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">icp</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">[</span><span class=\"n\">train</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">icp</span><span class=\"o\">.</span><span class=\"n\">calibrate</span><span class=\"p\">(</span><span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">cal</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">[</span><span class=\"n\">cal</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">icp</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">significance</span><span class=\"o\">=</span><span class=\"mf\">0.10</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">array([[  5. ,  20.6],</span>\n<span class=\"go\">        [ 15.5,  31.1],</span>\n<span class=\"go\">        ...,</span>\n<span class=\"go\">        [ 14.2,  29.8],</span>\n<span class=\"go\">        [ 11.6,  27.2]])</span>\n</code></pre>\n</div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "teller.nonconformist.icp.BaseIcp, teller.nonconformist.base.RegressorMixin"}, "teller.nonconformist.IcpRegressor.__init__": {"fullname": "teller.nonconformist.IcpRegressor.__init__", "modulename": "teller.nonconformist", "qualname": "IcpRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nc_function</span>, </span><span class=\"param\"><span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "teller.nonconformist.IcpRegressor.predict": {"fullname": "teller.nonconformist.IcpRegressor.predict", "modulename": "teller.nonconformist", "qualname": "IcpRegressor.predict", "kind": "function", "doc": "<p>Predict the output values for a set of input patterns.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>x : numpy array of shape [n_samples, n_features]\n        Inputs of patters for which to predict output values.</p>\n\n<p>significance : float\n        Significance level (maximum allowed error rate) of predictions.\n        Should be a float between 0 and 1. If <code>None</code>, then intervals for\n        all significance levels (0.01, 0.02, ..., 0.99) are output in a\n        3d-matrix.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>p : numpy array of shape [n_samples, 2] or [n_samples, 2, 99}\n        If significance is <code>None</code>, then p contains the interval (minimum\n        and maximum boundaries) for each test pattern, and each significance\n        level (0.01, 0.02, ..., 0.99). If significance is a float between\n        0 and 1, then p contains the prediction intervals (minimum and\n        maximum boundaries) for the set of test patterns at the chosen\n        significance level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">significance</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.IcpRegressor.set_fit_request": {"fullname": "teller.nonconformist.IcpRegressor.set_fit_request", "modulename": "teller.nonconformist", "qualname": "IcpRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.nonconformist.IcpRegressor.set_predict_request": {"fullname": "teller.nonconformist.IcpRegressor.set_predict_request", "modulename": "teller.nonconformist", "qualname": "IcpRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.predictioninterval": {"fullname": "teller.predictioninterval", "modulename": "teller.predictioninterval", "kind": "module", "doc": "<p></p>\n"}, "teller.predictioninterval.PredictionInterval": {"fullname": "teller.predictioninterval.PredictionInterval", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval", "kind": "class", "doc": "<p>Class PredictionInterval: Obtain prediction intervals.</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj: an object;\n    fitted object containing methods `fit` and `predict`\n\nmethod: a string;\n    method for constructing the prediction intervals.\n    Currently \"splitconformal\" (default) and \"localconformal\"\n\nlevel: a float;\n    Confidence level for prediction intervals. Default is 0.95,\n    equivalent to a miscoverage error of 0.05\n\nseed: an integer;\n    Reproducibility of fit (there's a random split between fitting and calibration data)\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator, sklearn.base.RegressorMixin"}, "teller.predictioninterval.PredictionInterval.__init__": {"fullname": "teller.predictioninterval.PredictionInterval.__init__", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;splitconformal&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mf\">0.95</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, "teller.predictioninterval.PredictionInterval.obj": {"fullname": "teller.predictioninterval.PredictionInterval.obj", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval.obj", "kind": "variable", "doc": "<p></p>\n"}, "teller.predictioninterval.PredictionInterval.method": {"fullname": "teller.predictioninterval.PredictionInterval.method", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval.method", "kind": "variable", "doc": "<p></p>\n"}, "teller.predictioninterval.PredictionInterval.level": {"fullname": "teller.predictioninterval.PredictionInterval.level", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval.level", "kind": "variable", "doc": "<p></p>\n"}, "teller.predictioninterval.PredictionInterval.seed": {"fullname": "teller.predictioninterval.PredictionInterval.seed", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval.seed", "kind": "variable", "doc": "<p></p>\n"}, "teller.predictioninterval.PredictionInterval.quantile_": {"fullname": "teller.predictioninterval.PredictionInterval.quantile_", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval.quantile_", "kind": "variable", "doc": "<p></p>\n"}, "teller.predictioninterval.PredictionInterval.icp_": {"fullname": "teller.predictioninterval.PredictionInterval.icp_", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval.icp_", "kind": "variable", "doc": "<p></p>\n"}, "teller.predictioninterval.PredictionInterval.fit": {"fullname": "teller.predictioninterval.PredictionInterval.fit", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval.fit", "kind": "function", "doc": "<p>Fit the <code>method</code> to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: array-like, shape = [n_samples, n_features];\n    Training set vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples, ]; Target values.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.predictioninterval.PredictionInterval.predict": {"fullname": "teller.predictioninterval.PredictionInterval.predict", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval.predict", "kind": "function", "doc": "<p>Obtain predictions and prediction intervals</p>\n\n<p>Args:</p>\n\n<pre><code>X: array-like, shape = [n_samples, n_features];\n    Testing set vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_pi: boolean\n    Whether the prediction interval is returned or not.\n    Default is False, for compatibility with other _estimators_.\n    If True, a tuple containing the predictions + lower and upper\n    bounds is returned.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_pi</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"fullname": "teller.predictioninterval.PredictionInterval.set_predict_request", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.predictioninterval.PredictionInterval.set_score_request": {"fullname": "teller.predictioninterval.PredictionInterval.set_score_request", "modulename": "teller.predictioninterval", "qualname": "PredictionInterval.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils": {"fullname": "teller.utils", "modulename": "teller.utils", "kind": "module", "doc": "<p></p>\n"}, "teller.utils.deepcopy": {"fullname": "teller.utils.deepcopy", "modulename": "teller.utils.deepcopy", "kind": "module", "doc": "<p></p>\n"}, "teller.utils.memoize": {"fullname": "teller.utils.memoize", "modulename": "teller.utils.memoize", "kind": "module", "doc": "<p></p>\n"}, "teller.utils.diff_list": {"fullname": "teller.utils.diff_list", "modulename": "teller.utils", "qualname": "diff_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">first_list</span>, </span><span class=\"param\"><span class=\"n\">second_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.merge_two_dicts": {"fullname": "teller.utils.merge_two_dicts", "modulename": "teller.utils", "qualname": "merge_two_dicts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.flatten": {"fullname": "teller.utils.flatten", "modulename": "teller.utils", "qualname": "flatten", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.is_factor": {"fullname": "teller.utils.is_factor", "modulename": "teller.utils", "qualname": "is_factor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.tuple_insert": {"fullname": "teller.utils.tuple_insert", "modulename": "teller.utils", "qualname": "tuple_insert", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tup</span>, </span><span class=\"param\"><span class=\"n\">pos</span>, </span><span class=\"param\"><span class=\"n\">ele</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_gradient": {"fullname": "teller.utils.numerical_gradient", "modulename": "teller.utils.numerical_gradient", "kind": "module", "doc": "<p></p>\n"}, "teller.utils.numerical_interactions": {"fullname": "teller.utils.numerical_interactions", "modulename": "teller.utils", "qualname": "numerical_interactions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">ix1</span>, </span><span class=\"param\"><span class=\"n\">ix2</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_gradient_jackknife": {"fullname": "teller.utils.numerical_gradient_jackknife", "modulename": "teller.utils.numerical_gradient_jackknife", "kind": "module", "doc": "<p></p>\n"}, "teller.utils.numerical_interactions_jackknife": {"fullname": "teller.utils.numerical_interactions_jackknife", "modulename": "teller.utils.numerical_interactions_jackknife", "kind": "module", "doc": "<p></p>\n"}, "teller.utils.numerical_gradient_gaussian": {"fullname": "teller.utils.numerical_gradient_gaussian", "modulename": "teller.utils.numerical_gradient_gaussian", "kind": "module", "doc": "<p></p>\n"}, "teller.utils.numerical_interactions_gaussian": {"fullname": "teller.utils.numerical_interactions_gaussian", "modulename": "teller.utils.numerical_interactions_gaussian", "kind": "module", "doc": "<p></p>\n"}, "teller.utils.get_code_pval": {"fullname": "teller.utils.get_code_pval", "modulename": "teller.utils", "qualname": "get_code_pval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pval</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.Progbar": {"fullname": "teller.utils.Progbar", "modulename": "teller.utils", "qualname": "Progbar", "kind": "class", "doc": "<p>Displays a progress bar.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<pre><code>target: Total number of steps expected, None if unknown.\nwidth: Progress bar width on screen.\nverbose: Verbosity mode, 0 (silent), 1 (verbose), 2 (semi-verbose)\nstateful_metrics: Iterable of string names of metrics that\n    should *not* be averaged over time. Metrics in this list\n    will be displayed as-is. All others will be averaged\n    by the progbar before display.\ninterval: Minimum visual progress update interval (in seconds).\n</code></pre>\n"}, "teller.utils.Progbar.__init__": {"fullname": "teller.utils.Progbar.__init__", "modulename": "teller.utils", "qualname": "Progbar.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">30</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>, </span><span class=\"param\"><span class=\"n\">stateful_metrics</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "teller.utils.Progbar.target": {"fullname": "teller.utils.Progbar.target", "modulename": "teller.utils", "qualname": "Progbar.target", "kind": "variable", "doc": "<p></p>\n"}, "teller.utils.Progbar.width": {"fullname": "teller.utils.Progbar.width", "modulename": "teller.utils", "qualname": "Progbar.width", "kind": "variable", "doc": "<p></p>\n"}, "teller.utils.Progbar.verbose": {"fullname": "teller.utils.Progbar.verbose", "modulename": "teller.utils", "qualname": "Progbar.verbose", "kind": "variable", "doc": "<p></p>\n"}, "teller.utils.Progbar.interval": {"fullname": "teller.utils.Progbar.interval", "modulename": "teller.utils", "qualname": "Progbar.interval", "kind": "variable", "doc": "<p></p>\n"}, "teller.utils.Progbar.update": {"fullname": "teller.utils.Progbar.update", "modulename": "teller.utils", "qualname": "Progbar.update", "kind": "function", "doc": "<p>Updates the progress bar.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<pre><code>current: Index of current step.\nvalues: List of tuples:\n    `(name, value_for_last_step)`.\n    If `name` is in `stateful_metrics`,\n    `value_for_last_step` will be displayed as-is.\n    Else, an average of the metric over time will be displayed.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.Progbar.add": {"fullname": "teller.utils.Progbar.add", "modulename": "teller.utils", "qualname": "Progbar.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.score_regression": {"fullname": "teller.utils.score_regression", "modulename": "teller.utils", "qualname": "score_regression", "kind": "function", "doc": "<p>Score the model on test set covariates X and response y.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.score_classification": {"fullname": "teller.utils.score_classification", "modulename": "teller.utils", "qualname": "score_classification", "kind": "function", "doc": "<p>Score the model on test set covariates X and response y.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.t_test": {"fullname": "teller.utils.t_test", "modulename": "teller.utils.t_test", "kind": "module", "doc": "<p>Paired t-test</p>\n"}, "teller.utils.var_test": {"fullname": "teller.utils.var_test", "modulename": "teller.utils.var_test", "kind": "module", "doc": "<p>Variance ratio test</p>\n"}, "teller.utils.deepcopy.deepcopy": {"fullname": "teller.utils.deepcopy.deepcopy", "modulename": "teller.utils.deepcopy", "qualname": "deepcopy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.memoize.memoize": {"fullname": "teller.utils.memoize.memoize", "modulename": "teller.utils.memoize", "qualname": "memoize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">128</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_gradient.numerical_gradient": {"fullname": "teller.utils.numerical_gradient.numerical_gradient", "modulename": "teller.utils.numerical_gradient", "qualname": "numerical_gradient", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_gradient.numerical_interactions": {"fullname": "teller.utils.numerical_gradient.numerical_interactions", "modulename": "teller.utils.numerical_gradient", "qualname": "numerical_interactions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">ix1</span>, </span><span class=\"param\"><span class=\"n\">ix2</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"fullname": "teller.utils.numerical_gradient_gaussian.get_code_pval", "modulename": "teller.utils.numerical_gradient_gaussian", "qualname": "get_code_pval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pval</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"fullname": "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian", "modulename": "teller.utils.numerical_gradient_gaussian", "qualname": "numerical_gradient_gaussian", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"fullname": "teller.utils.numerical_gradient_jackknife.get_code_pval", "modulename": "teller.utils.numerical_gradient_jackknife", "qualname": "get_code_pval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pval</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"fullname": "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife", "modulename": "teller.utils.numerical_gradient_jackknife", "qualname": "numerical_gradient_jackknife", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"fullname": "teller.utils.numerical_interactions_gaussian.get_code_pval", "modulename": "teller.utils.numerical_interactions_gaussian", "qualname": "get_code_pval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pval</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"fullname": "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian", "modulename": "teller.utils.numerical_interactions_gaussian", "qualname": "numerical_interactions_gaussian", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">ix1</span>, </span><span class=\"param\"><span class=\"n\">ix2</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"fullname": "teller.utils.numerical_interactions_jackknife.get_code_pval", "modulename": "teller.utils.numerical_interactions_jackknife", "qualname": "get_code_pval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pval</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"fullname": "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife", "modulename": "teller.utils.numerical_interactions_jackknife", "qualname": "numerical_interactions_jackknife", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">ix1</span>, </span><span class=\"param\"><span class=\"n\">ix2</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.t_test.t_test": {"fullname": "teller.utils.t_test.t_test", "modulename": "teller.utils.t_test", "qualname": "t_test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">alternative</span><span class=\"o\">=</span><span class=\"s1\">&#39;less&#39;</span>, </span><span class=\"param\"><span class=\"n\">var_equal</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">mu</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">conf_level</span><span class=\"o\">=</span><span class=\"mf\">0.95</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "teller.utils.var_test.var_test": {"fullname": "teller.utils.var_test.var_test", "modulename": "teller.utils.var_test", "qualname": "var_test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">ratio</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">alternative</span><span class=\"o\">=</span><span class=\"s1\">&#39;less&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}}, "docInfo": {"teller": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Comparator": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 46}, "teller.Comparator.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "teller.Comparator.obj1": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Comparator.obj2": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Comparator.summary": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 16}, "teller.Explainer": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 70}, "teller.Explainer.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 3}, "teller.Explainer.obj": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.n_jobs": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.y_mean_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.effects_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.residuals_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.r_squared_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.adj_r_squared_": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.ci_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.ci_inters_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.type_fit": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.y_class": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.normalize": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.type_ci": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.col_inters": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.Explainer.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 101, "bases": 0, "doc": 195}, "teller.Explainer.summary": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 23}, "teller.Explainer.plot": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 21}, "teller.Explainer.get_individual_effects": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "teller.Explainer.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.PredictionInterval": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 76}, "teller.PredictionInterval.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 3}, "teller.PredictionInterval.obj": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.PredictionInterval.method": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.PredictionInterval.level": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.PredictionInterval.seed": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.PredictionInterval.quantile_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.PredictionInterval.icp_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.PredictionInterval.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 57}, "teller.PredictionInterval.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 75}, "teller.PredictionInterval.set_predict_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.PredictionInterval.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.demo": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Comparator": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 46}, "teller.explainer.Comparator.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "teller.explainer.Comparator.obj1": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Comparator.obj2": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Comparator.summary": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 16}, "teller.explainer.Explainer": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 70}, "teller.explainer.Explainer.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 3}, "teller.explainer.Explainer.obj": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.n_jobs": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.y_mean_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.effects_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.residuals_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.r_squared_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.adj_r_squared_": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.ci_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.ci_inters_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.type_fit": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.y_class": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.normalize": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.type_ci": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.col_inters": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.explainer.Explainer.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 101, "bases": 0, "doc": 195}, "teller.explainer.Explainer.summary": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 23}, "teller.explainer.Explainer.plot": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 21}, "teller.explainer.Explainer.get_individual_effects": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "teller.explainer.Explainer.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.nonconformist": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.nonconformist.AbsErrorErrFunc": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 32}, "teller.nonconformist.AbsErrorErrFunc.apply": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 65}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 69}, "teller.nonconformist.QuantileRegErrFunc": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 30}, "teller.nonconformist.QuantileRegErrFunc.apply": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 65}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 69}, "teller.nonconformist.RegressorAdapter": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 675}, "teller.nonconformist.RegressorAdapter.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 3}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.nonconformist.RegressorNc": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 102}, "teller.nonconformist.RegressorNc.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "teller.nonconformist.RegressorNc.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 193}, "teller.nonconformist.RegressorNc.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.nonconformist.RegressorNc.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.nonconformist.RegressorNc.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.nonconformist.RegressorNormalizer": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 675}, "teller.nonconformist.RegressorNormalizer.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 3}, "teller.nonconformist.RegressorNormalizer.base_model": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.nonconformist.RegressorNormalizer.normalizer_model": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.nonconformist.RegressorNormalizer.err_func": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.nonconformist.RegressorNormalizer.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 3}, "teller.nonconformist.RegressorNormalizer.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.nonconformist.IcpRegressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 748}, "teller.nonconformist.IcpRegressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 3}, "teller.nonconformist.IcpRegressor.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 161}, "teller.nonconformist.IcpRegressor.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.nonconformist.IcpRegressor.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.predictioninterval": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.predictioninterval.PredictionInterval": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 76}, "teller.predictioninterval.PredictionInterval.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 3}, "teller.predictioninterval.PredictionInterval.obj": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.predictioninterval.PredictionInterval.method": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.predictioninterval.PredictionInterval.level": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.predictioninterval.PredictionInterval.seed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.predictioninterval.PredictionInterval.quantile_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.predictioninterval.PredictionInterval.icp_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.predictioninterval.PredictionInterval.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 57}, "teller.predictioninterval.PredictionInterval.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 75}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.predictioninterval.PredictionInterval.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "teller.utils": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.deepcopy": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.memoize": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.diff_list": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 3}, "teller.utils.merge_two_dicts": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "teller.utils.flatten": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "teller.utils.is_factor": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "teller.utils.tuple_insert": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 3}, "teller.utils.numerical_gradient": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.numerical_interactions": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 3}, "teller.utils.numerical_gradient_jackknife": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.numerical_interactions_jackknife": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.numerical_gradient_gaussian": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.numerical_interactions_gaussian": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.get_code_pval": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "teller.utils.Progbar": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 82}, "teller.utils.Progbar.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 3}, "teller.utils.Progbar.target": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.Progbar.width": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.Progbar.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.Progbar.interval": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "teller.utils.Progbar.update": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 57}, "teller.utils.Progbar.add": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "teller.utils.score_regression": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 14}, "teller.utils.score_classification": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 14}, "teller.utils.t_test": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "teller.utils.var_test": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "teller.utils.deepcopy.deepcopy": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "teller.utils.memoize.memoize": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 3}, "teller.utils.numerical_gradient.numerical_gradient": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 3}, "teller.utils.numerical_gradient.numerical_interactions": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 3}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 3}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 3}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 3}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 3}, "teller.utils.t_test.t_test": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "teller.utils.var_test.var_test": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 3}}, "length": 152, "save": true}, "index": {"qualname": {"root": {"docs": {"teller.Comparator.__init__": {"tf": 1}, "teller.Explainer.__init__": {"tf": 1}, "teller.Explainer.y_mean_": {"tf": 1}, "teller.Explainer.effects_": {"tf": 1}, "teller.Explainer.residuals_": {"tf": 1}, "teller.Explainer.r_squared_": {"tf": 1}, "teller.Explainer.adj_r_squared_": {"tf": 1}, "teller.Explainer.ci_": {"tf": 1}, "teller.Explainer.ci_inters_": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.PredictionInterval.quantile_": {"tf": 1}, "teller.PredictionInterval.icp_": {"tf": 1}, "teller.explainer.Comparator.__init__": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.explainer.Explainer.y_mean_": {"tf": 1}, "teller.explainer.Explainer.effects_": {"tf": 1}, "teller.explainer.Explainer.residuals_": {"tf": 1}, "teller.explainer.Explainer.r_squared_": {"tf": 1}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1}, "teller.explainer.Explainer.ci_": {"tf": 1}, "teller.explainer.Explainer.ci_inters_": {"tf": 1}, "teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.quantile_": {"tf": 1}, "teller.predictioninterval.PredictionInterval.icp_": {"tf": 1}, "teller.utils.Progbar.__init__": {"tf": 1}}, "df": 29, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.Comparator": {"tf": 1}, "teller.Comparator.__init__": {"tf": 1}, "teller.Comparator.obj1": {"tf": 1}, "teller.Comparator.obj2": {"tf": 1}, "teller.Comparator.summary": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}, "teller.explainer.Comparator.__init__": {"tf": 1}, "teller.explainer.Comparator.obj1": {"tf": 1}, "teller.explainer.Comparator.obj2": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}}, "df": 10}}}}}}}}, "l": {"docs": {"teller.Explainer.col_inters": {"tf": 1}, "teller.explainer.Explainer.col_inters": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}}, "df": 5}}}, "i": {"docs": {"teller.Explainer.ci_": {"tf": 1}, "teller.Explainer.ci_inters_": {"tf": 1}, "teller.Explainer.type_ci": {"tf": 1}, "teller.explainer.Explainer.ci_": {"tf": 1}, "teller.explainer.Explainer.ci_inters_": {"tf": 1}, "teller.explainer.Explainer.type_ci": {"tf": 1}}, "df": 6}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.y_class": {"tf": 1}, "teller.explainer.Explainer.y_class": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.utils.score_classification": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"teller.Comparator.__init__": {"tf": 1}, "teller.Explainer.__init__": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.explainer.Comparator.__init__": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "teller.utils.Progbar.__init__": {"tf": 1}}, "df": 11}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.ci_inters_": {"tf": 1}, "teller.Explainer.col_inters": {"tf": 1}, "teller.explainer.Explainer.ci_inters_": {"tf": 1}, "teller.explainer.Explainer.col_inters": {"tf": 1}}, "df": 4}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}}, "df": 6}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.Progbar.interval": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.Explainer.get_individual_effects": {"tf": 1}, "teller.explainer.Explainer.get_individual_effects": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.tuple_insert": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "p": {"docs": {"teller.PredictionInterval.icp_": {"tf": 1}, "teller.predictioninterval.PredictionInterval.icp_": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}}, "df": 5}}}}}}}}}}}, "s": {"docs": {"teller.utils.is_factor": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"1": {"docs": {"teller.Comparator.obj1": {"tf": 1}, "teller.explainer.Comparator.obj1": {"tf": 1}}, "df": 2}, "2": {"docs": {"teller.Comparator.obj2": {"tf": 1}, "teller.explainer.Comparator.obj2": {"tf": 1}}, "df": 2}, "docs": {"teller.Explainer.obj": {"tf": 1}, "teller.PredictionInterval.obj": {"tf": 1}, "teller.explainer.Explainer.obj": {"tf": 1}, "teller.predictioninterval.PredictionInterval.obj": {"tf": 1}}, "df": 4}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"teller.Comparator.summary": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}, "teller.explainer.Explainer.summary": {"tf": 1}}, "df": 4}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.r_squared_": {"tf": 1}, "teller.Explainer.adj_r_squared_": {"tf": 1}, "teller.explainer.Explainer.r_squared_": {"tf": 1}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.PredictionInterval.seed": {"tf": 1}, "teller.predictioninterval.PredictionInterval.seed": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 7}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.__init__": {"tf": 1}, "teller.Explainer.obj": {"tf": 1}, "teller.Explainer.n_jobs": {"tf": 1}, "teller.Explainer.y_mean_": {"tf": 1}, "teller.Explainer.effects_": {"tf": 1}, "teller.Explainer.residuals_": {"tf": 1}, "teller.Explainer.r_squared_": {"tf": 1}, "teller.Explainer.adj_r_squared_": {"tf": 1}, "teller.Explainer.ci_": {"tf": 1}, "teller.Explainer.ci_inters_": {"tf": 1}, "teller.Explainer.type_fit": {"tf": 1}, "teller.Explainer.y_class": {"tf": 1}, "teller.Explainer.normalize": {"tf": 1}, "teller.Explainer.type_ci": {"tf": 1}, "teller.Explainer.col_inters": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.Explainer.plot": {"tf": 1}, "teller.Explainer.get_individual_effects": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.explainer.Explainer.obj": {"tf": 1}, "teller.explainer.Explainer.n_jobs": {"tf": 1}, "teller.explainer.Explainer.y_mean_": {"tf": 1}, "teller.explainer.Explainer.effects_": {"tf": 1}, "teller.explainer.Explainer.residuals_": {"tf": 1}, "teller.explainer.Explainer.r_squared_": {"tf": 1}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1}, "teller.explainer.Explainer.ci_": {"tf": 1}, "teller.explainer.Explainer.ci_inters_": {"tf": 1}, "teller.explainer.Explainer.type_fit": {"tf": 1}, "teller.explainer.Explainer.y_class": {"tf": 1}, "teller.explainer.Explainer.normalize": {"tf": 1}, "teller.explainer.Explainer.type_ci": {"tf": 1}, "teller.explainer.Explainer.col_inters": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.summary": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.get_individual_effects": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}}, "df": 42}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.effects_": {"tf": 1}, "teller.Explainer.get_individual_effects": {"tf": 1}, "teller.explainer.Explainer.effects_": {"tf": 1}, "teller.explainer.Explainer.get_individual_effects": {"tf": 1}}, "df": 4}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorNormalizer.err_func": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"teller.Explainer.n_jobs": {"tf": 1}, "teller.explainer.Explainer.n_jobs": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.normalize": {"tf": 1}, "teller.explainer.Explainer.normalize": {"tf": 1}}, "df": 2, "r": {"docs": {"teller.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}}, "df": 12}}}}}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.n_jobs": {"tf": 1}, "teller.explainer.Explainer.n_jobs": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}}, "df": 4}}}}}}}}}, "y": {"docs": {"teller.Explainer.y_mean_": {"tf": 1}, "teller.Explainer.y_class": {"tf": 1}, "teller.explainer.Explainer.y_mean_": {"tf": 1}, "teller.explainer.Explainer.y_class": {"tf": 1}}, "df": 4}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer.y_mean_": {"tf": 1}, "teller.explainer.Explainer.y_mean_": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"teller.PredictionInterval.method": {"tf": 1}, "teller.predictioninterval.PredictionInterval.method": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.memoize": {"tf": 1}, "teller.utils.memoize.memoize": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.merge_two_dicts": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"teller.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {"teller.Explainer.r_squared_": {"tf": 1}, "teller.Explainer.adj_r_squared_": {"tf": 1}, "teller.explainer.Explainer.r_squared_": {"tf": 1}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.residuals_": {"tf": 1}, "teller.explainer.Explainer.residuals_": {"tf": 1}}, "df": 2}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}}, "df": 4}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}}, "df": 6}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.err_func": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}}, "df": 9}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.utils.score_regression": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "j": {"docs": {"teller.Explainer.adj_r_squared_": {"tf": 1}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1}}, "df": 2}, "d": {"docs": {"teller.utils.Progbar.add": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {"teller.utils.t_test": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}}, "df": 2, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.type_fit": {"tf": 1}, "teller.Explainer.type_ci": {"tf": 1}, "teller.explainer.Explainer.type_fit": {"tf": 1}, "teller.explainer.Explainer.type_ci": {"tf": 1}}, "df": 4}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"teller.utils.merge_two_dicts": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.tuple_insert": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.Progbar.target": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.t_test": {"tf": 1}, "teller.utils.var_test": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 4}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.type_fit": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.explainer.Explainer.type_fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}}, "df": 13}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.RegressorNormalizer.err_func": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"teller.utils.flatten": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.utils.is_factor": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}}, "df": 9, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.PredictionInterval.obj": {"tf": 1}, "teller.PredictionInterval.method": {"tf": 1}, "teller.PredictionInterval.level": {"tf": 1}, "teller.PredictionInterval.seed": {"tf": 1}, "teller.PredictionInterval.quantile_": {"tf": 1}, "teller.PredictionInterval.icp_": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.obj": {"tf": 1}, "teller.predictioninterval.PredictionInterval.method": {"tf": 1}, "teller.predictioninterval.PredictionInterval.level": {"tf": 1}, "teller.predictioninterval.PredictionInterval.seed": {"tf": 1}, "teller.predictioninterval.PredictionInterval.quantile_": {"tf": 1}, "teller.predictioninterval.PredictionInterval.icp_": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 24}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.__init__": {"tf": 1}, "teller.utils.Progbar.target": {"tf": 1}, "teller.utils.Progbar.width": {"tf": 1}, "teller.utils.Progbar.verbose": {"tf": 1}, "teller.utils.Progbar.interval": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}, "teller.utils.Progbar.add": {"tf": 1}}, "df": 8}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}}, "df": 5}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.get_individual_effects": {"tf": 1}, "teller.explainer.Explainer.get_individual_effects": {"tf": 1}, "teller.utils.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}}, "df": 7}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}}, "df": 6}}}}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}}, "df": 4}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"teller.PredictionInterval.level": {"tf": 1}, "teller.predictioninterval.PredictionInterval.level": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.diff_list": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"teller.PredictionInterval.quantile_": {"tf": 1}, "teller.predictioninterval.PredictionInterval.quantile_": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.RegressorNormalizer.base_model": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"teller.utils.deepcopy": {"tf": 1}, "teller.utils.deepcopy.deepcopy": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"teller.utils.diff_list": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.merge_two_dicts": {"tf": 1}}, "df": 1}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"teller.utils.Progbar.width": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.Progbar.verbose": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"teller.utils.var_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}}}}}, "fullname": {"root": {"docs": {"teller.Comparator.__init__": {"tf": 1}, "teller.Explainer.__init__": {"tf": 1}, "teller.Explainer.y_mean_": {"tf": 1}, "teller.Explainer.effects_": {"tf": 1}, "teller.Explainer.residuals_": {"tf": 1}, "teller.Explainer.r_squared_": {"tf": 1}, "teller.Explainer.adj_r_squared_": {"tf": 1}, "teller.Explainer.ci_": {"tf": 1}, "teller.Explainer.ci_inters_": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.PredictionInterval.quantile_": {"tf": 1}, "teller.PredictionInterval.icp_": {"tf": 1}, "teller.explainer.Comparator.__init__": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.explainer.Explainer.y_mean_": {"tf": 1}, "teller.explainer.Explainer.effects_": {"tf": 1}, "teller.explainer.Explainer.residuals_": {"tf": 1}, "teller.explainer.Explainer.r_squared_": {"tf": 1}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1}, "teller.explainer.Explainer.ci_": {"tf": 1}, "teller.explainer.Explainer.ci_inters_": {"tf": 1}, "teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.quantile_": {"tf": 1}, "teller.predictioninterval.PredictionInterval.icp_": {"tf": 1}, "teller.utils.Progbar.__init__": {"tf": 1}}, "df": 29, "t": {"docs": {"teller.utils.t_test": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller": {"tf": 1}, "teller.Comparator": {"tf": 1}, "teller.Comparator.__init__": {"tf": 1}, "teller.Comparator.obj1": {"tf": 1}, "teller.Comparator.obj2": {"tf": 1}, "teller.Comparator.summary": {"tf": 1}, "teller.Explainer": {"tf": 1}, "teller.Explainer.__init__": {"tf": 1}, "teller.Explainer.obj": {"tf": 1}, "teller.Explainer.n_jobs": {"tf": 1}, "teller.Explainer.y_mean_": {"tf": 1}, "teller.Explainer.effects_": {"tf": 1}, "teller.Explainer.residuals_": {"tf": 1}, "teller.Explainer.r_squared_": {"tf": 1}, "teller.Explainer.adj_r_squared_": {"tf": 1}, "teller.Explainer.ci_": {"tf": 1}, "teller.Explainer.ci_inters_": {"tf": 1}, "teller.Explainer.type_fit": {"tf": 1}, "teller.Explainer.y_class": {"tf": 1}, "teller.Explainer.normalize": {"tf": 1}, "teller.Explainer.type_ci": {"tf": 1}, "teller.Explainer.col_inters": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.Explainer.plot": {"tf": 1}, "teller.Explainer.get_individual_effects": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.PredictionInterval.obj": {"tf": 1}, "teller.PredictionInterval.method": {"tf": 1}, "teller.PredictionInterval.level": {"tf": 1}, "teller.PredictionInterval.seed": {"tf": 1}, "teller.PredictionInterval.quantile_": {"tf": 1}, "teller.PredictionInterval.icp_": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.demo": {"tf": 1}, "teller.explainer": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}, "teller.explainer.Comparator.__init__": {"tf": 1}, "teller.explainer.Comparator.obj1": {"tf": 1}, "teller.explainer.Comparator.obj2": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.explainer.Explainer.obj": {"tf": 1}, "teller.explainer.Explainer.n_jobs": {"tf": 1}, "teller.explainer.Explainer.y_mean_": {"tf": 1}, "teller.explainer.Explainer.effects_": {"tf": 1}, "teller.explainer.Explainer.residuals_": {"tf": 1}, "teller.explainer.Explainer.r_squared_": {"tf": 1}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1}, "teller.explainer.Explainer.ci_": {"tf": 1}, "teller.explainer.Explainer.ci_inters_": {"tf": 1}, "teller.explainer.Explainer.type_fit": {"tf": 1}, "teller.explainer.Explainer.y_class": {"tf": 1}, "teller.explainer.Explainer.normalize": {"tf": 1}, "teller.explainer.Explainer.type_ci": {"tf": 1}, "teller.explainer.Explainer.col_inters": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.summary": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.get_individual_effects": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.err_func": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.obj": {"tf": 1}, "teller.predictioninterval.PredictionInterval.method": {"tf": 1}, "teller.predictioninterval.PredictionInterval.level": {"tf": 1}, "teller.predictioninterval.PredictionInterval.seed": {"tf": 1}, "teller.predictioninterval.PredictionInterval.quantile_": {"tf": 1}, "teller.predictioninterval.PredictionInterval.icp_": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils": {"tf": 1}, "teller.utils.deepcopy": {"tf": 1}, "teller.utils.memoize": {"tf": 1}, "teller.utils.diff_list": {"tf": 1}, "teller.utils.merge_two_dicts": {"tf": 1}, "teller.utils.flatten": {"tf": 1}, "teller.utils.is_factor": {"tf": 1}, "teller.utils.tuple_insert": {"tf": 1}, "teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.get_code_pval": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.__init__": {"tf": 1}, "teller.utils.Progbar.target": {"tf": 1}, "teller.utils.Progbar.width": {"tf": 1}, "teller.utils.Progbar.verbose": {"tf": 1}, "teller.utils.Progbar.interval": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}, "teller.utils.Progbar.add": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}, "teller.utils.t_test": {"tf": 1}, "teller.utils.var_test": {"tf": 1}, "teller.utils.deepcopy.deepcopy": {"tf": 1}, "teller.utils.memoize.memoize": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 152}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.t_test": {"tf": 1}, "teller.utils.var_test": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1.4142135623730951}, "teller.utils.var_test.var_test": {"tf": 1.4142135623730951}}, "df": 4}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.type_fit": {"tf": 1}, "teller.Explainer.type_ci": {"tf": 1}, "teller.explainer.Explainer.type_fit": {"tf": 1}, "teller.explainer.Explainer.type_ci": {"tf": 1}}, "df": 4}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"teller.utils.merge_two_dicts": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.tuple_insert": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.Progbar.target": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.Comparator": {"tf": 1}, "teller.Comparator.__init__": {"tf": 1}, "teller.Comparator.obj1": {"tf": 1}, "teller.Comparator.obj2": {"tf": 1}, "teller.Comparator.summary": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}, "teller.explainer.Comparator.__init__": {"tf": 1}, "teller.explainer.Comparator.obj1": {"tf": 1}, "teller.explainer.Comparator.obj2": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}}, "df": 10}}}}}}}}, "l": {"docs": {"teller.Explainer.col_inters": {"tf": 1}, "teller.explainer.Explainer.col_inters": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}}, "df": 5}}}, "i": {"docs": {"teller.Explainer.ci_": {"tf": 1}, "teller.Explainer.ci_inters_": {"tf": 1}, "teller.Explainer.type_ci": {"tf": 1}, "teller.explainer.Explainer.ci_": {"tf": 1}, "teller.explainer.Explainer.ci_inters_": {"tf": 1}, "teller.explainer.Explainer.type_ci": {"tf": 1}}, "df": 6}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.y_class": {"tf": 1}, "teller.explainer.Explainer.y_class": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.utils.score_classification": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"teller.Comparator.__init__": {"tf": 1}, "teller.Explainer.__init__": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.explainer.Comparator.__init__": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "teller.utils.Progbar.__init__": {"tf": 1}}, "df": 11}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.ci_inters_": {"tf": 1}, "teller.Explainer.col_inters": {"tf": 1}, "teller.explainer.Explainer.ci_inters_": {"tf": 1}, "teller.explainer.Explainer.col_inters": {"tf": 1}}, "df": 4}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1.4142135623730951}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.Progbar.interval": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.Explainer.get_individual_effects": {"tf": 1}, "teller.explainer.Explainer.get_individual_effects": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.tuple_insert": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "p": {"docs": {"teller.PredictionInterval.icp_": {"tf": 1}, "teller.predictioninterval.PredictionInterval.icp_": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}}, "df": 5}}}}}}}}}}}, "s": {"docs": {"teller.utils.is_factor": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"1": {"docs": {"teller.Comparator.obj1": {"tf": 1}, "teller.explainer.Comparator.obj1": {"tf": 1}}, "df": 2}, "2": {"docs": {"teller.Comparator.obj2": {"tf": 1}, "teller.explainer.Comparator.obj2": {"tf": 1}}, "df": 2}, "docs": {"teller.Explainer.obj": {"tf": 1}, "teller.PredictionInterval.obj": {"tf": 1}, "teller.explainer.Explainer.obj": {"tf": 1}, "teller.predictioninterval.PredictionInterval.obj": {"tf": 1}}, "df": 4}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"teller.Comparator.summary": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}, "teller.explainer.Explainer.summary": {"tf": 1}}, "df": 4}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.r_squared_": {"tf": 1}, "teller.Explainer.adj_r_squared_": {"tf": 1}, "teller.explainer.Explainer.r_squared_": {"tf": 1}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.PredictionInterval.seed": {"tf": 1}, "teller.predictioninterval.PredictionInterval.seed": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 7}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.__init__": {"tf": 1}, "teller.Explainer.obj": {"tf": 1}, "teller.Explainer.n_jobs": {"tf": 1}, "teller.Explainer.y_mean_": {"tf": 1}, "teller.Explainer.effects_": {"tf": 1}, "teller.Explainer.residuals_": {"tf": 1}, "teller.Explainer.r_squared_": {"tf": 1}, "teller.Explainer.adj_r_squared_": {"tf": 1}, "teller.Explainer.ci_": {"tf": 1}, "teller.Explainer.ci_inters_": {"tf": 1}, "teller.Explainer.type_fit": {"tf": 1}, "teller.Explainer.y_class": {"tf": 1}, "teller.Explainer.normalize": {"tf": 1}, "teller.Explainer.type_ci": {"tf": 1}, "teller.Explainer.col_inters": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.Explainer.plot": {"tf": 1}, "teller.Explainer.get_individual_effects": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.explainer": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}, "teller.explainer.Comparator.__init__": {"tf": 1}, "teller.explainer.Comparator.obj1": {"tf": 1}, "teller.explainer.Comparator.obj2": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.__init__": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.obj": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.n_jobs": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.y_mean_": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.effects_": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.residuals_": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.r_squared_": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.ci_": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.ci_inters_": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.type_fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.y_class": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.normalize": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.type_ci": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.col_inters": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.summary": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.plot": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.get_individual_effects": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}}, "df": 48}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.effects_": {"tf": 1}, "teller.Explainer.get_individual_effects": {"tf": 1}, "teller.explainer.Explainer.effects_": {"tf": 1}, "teller.explainer.Explainer.get_individual_effects": {"tf": 1}}, "df": 4}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorNormalizer.err_func": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"teller.Explainer.n_jobs": {"tf": 1}, "teller.explainer.Explainer.n_jobs": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.normalize": {"tf": 1}, "teller.explainer.Explainer.normalize": {"tf": 1}}, "df": 2, "r": {"docs": {"teller.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.err_func": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}}, "df": 31}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1.4142135623730951}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1.4142135623730951}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1.4142135623730951}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1.4142135623730951}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1.4142135623730951}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1.4142135623730951}}, "df": 16}}}}}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.n_jobs": {"tf": 1}, "teller.explainer.Explainer.n_jobs": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1.4142135623730951}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}}}, "y": {"docs": {"teller.Explainer.y_mean_": {"tf": 1}, "teller.Explainer.y_class": {"tf": 1}, "teller.explainer.Explainer.y_mean_": {"tf": 1}, "teller.explainer.Explainer.y_class": {"tf": 1}}, "df": 4}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer.y_mean_": {"tf": 1}, "teller.explainer.Explainer.y_mean_": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"teller.PredictionInterval.method": {"tf": 1}, "teller.predictioninterval.PredictionInterval.method": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.memoize": {"tf": 1}, "teller.utils.memoize.memoize": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.merge_two_dicts": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"teller.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {"teller.Explainer.r_squared_": {"tf": 1}, "teller.Explainer.adj_r_squared_": {"tf": 1}, "teller.explainer.Explainer.r_squared_": {"tf": 1}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.residuals_": {"tf": 1}, "teller.explainer.Explainer.residuals_": {"tf": 1}}, "df": 2}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}}, "df": 4}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}}, "df": 6}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.err_func": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}}, "df": 9}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.utils.score_regression": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "j": {"docs": {"teller.Explainer.adj_r_squared_": {"tf": 1}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1}}, "df": 2}, "d": {"docs": {"teller.utils.Progbar.add": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 4}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.type_fit": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.explainer.Explainer.type_fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}}, "df": 13}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.RegressorNormalizer.err_func": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"teller.utils.flatten": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.utils.is_factor": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}}, "df": 9, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.PredictionInterval.obj": {"tf": 1}, "teller.PredictionInterval.method": {"tf": 1}, "teller.PredictionInterval.level": {"tf": 1}, "teller.PredictionInterval.seed": {"tf": 1}, "teller.PredictionInterval.quantile_": {"tf": 1}, "teller.PredictionInterval.icp_": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.predictioninterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.obj": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.method": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.level": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.seed": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.quantile_": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.icp_": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 25}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.__init__": {"tf": 1}, "teller.utils.Progbar.target": {"tf": 1}, "teller.utils.Progbar.width": {"tf": 1}, "teller.utils.Progbar.verbose": {"tf": 1}, "teller.utils.Progbar.interval": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}, "teller.utils.Progbar.add": {"tf": 1}}, "df": 8}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}}, "df": 5}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.get_individual_effects": {"tf": 1}, "teller.explainer.Explainer.get_individual_effects": {"tf": 1}, "teller.utils.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}}, "df": 7}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1.4142135623730951}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1.4142135623730951}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1.4142135623730951}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"teller.PredictionInterval.level": {"tf": 1}, "teller.predictioninterval.PredictionInterval.level": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.diff_list": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"teller.PredictionInterval.quantile_": {"tf": 1}, "teller.predictioninterval.PredictionInterval.quantile_": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {"teller.demo": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"teller.utils.deepcopy": {"tf": 1}, "teller.utils.deepcopy.deepcopy": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"teller.utils.diff_list": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.merge_two_dicts": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.RegressorNormalizer.base_model": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils": {"tf": 1}, "teller.utils.deepcopy": {"tf": 1}, "teller.utils.memoize": {"tf": 1}, "teller.utils.diff_list": {"tf": 1}, "teller.utils.merge_two_dicts": {"tf": 1}, "teller.utils.flatten": {"tf": 1}, "teller.utils.is_factor": {"tf": 1}, "teller.utils.tuple_insert": {"tf": 1}, "teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.get_code_pval": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.__init__": {"tf": 1}, "teller.utils.Progbar.target": {"tf": 1}, "teller.utils.Progbar.width": {"tf": 1}, "teller.utils.Progbar.verbose": {"tf": 1}, "teller.utils.Progbar.interval": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}, "teller.utils.Progbar.add": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}, "teller.utils.t_test": {"tf": 1}, "teller.utils.var_test": {"tf": 1}, "teller.utils.deepcopy.deepcopy": {"tf": 1}, "teller.utils.memoize.memoize": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 41}}}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"teller.utils.Progbar.width": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.Progbar.verbose": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"teller.utils.var_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"docs": {}, "df": 0}}, "signature": {"root": {"0": {"5": {"docs": {"teller.utils.Progbar.__init__": {"tf": 1}}, "df": 1}, "6": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}, "docs": {"teller.Explainer.__init__": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "teller.utils.Progbar.__init__": {"tf": 1}, "teller.utils.t_test": {"tf": 1.4142135623730951}, "teller.utils.t_test.t_test": {"tf": 1.4142135623730951}}, "df": 7}, "1": {"2": {"3": {"docs": {"teller.PredictionInterval.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}}, "df": 2}, "8": {"docs": {"teller.utils.memoize": {"tf": 1}, "teller.utils.memoize.memoize": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.Progbar.__init__": {"tf": 1}, "teller.utils.var_test": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 9, "e": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}}, "3": {"0": {"docs": {"teller.utils.Progbar.__init__": {"tf": 1}}, "df": 1}, "9": {"docs": {"teller.Explainer.fit": {"tf": 2}, "teller.PredictionInterval.__init__": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 2}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1.4142135623730951}, "teller.utils.t_test": {"tf": 1.4142135623730951}, "teller.utils.var_test": {"tf": 1.4142135623730951}, "teller.utils.t_test.t_test": {"tf": 1.4142135623730951}, "teller.utils.var_test.var_test": {"tf": 1.4142135623730951}}, "df": 8}, "docs": {}, "df": 0}, "9": {"5": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.t_test": {"tf": 1}, "teller.utils.var_test": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 16}, "docs": {}, "df": 0}, "docs": {"teller.Comparator.__init__": {"tf": 3.4641016151377544}, "teller.Comparator.summary": {"tf": 3.1622776601683795}, "teller.Explainer.__init__": {"tf": 5.656854249492381}, "teller.Explainer.fit": {"tf": 8.888194417315589}, "teller.Explainer.summary": {"tf": 3.1622776601683795}, "teller.Explainer.plot": {"tf": 3.7416573867739413}, "teller.Explainer.get_individual_effects": {"tf": 3.1622776601683795}, "teller.Explainer.set_fit_request": {"tf": 3.1622776601683795}, "teller.PredictionInterval.__init__": {"tf": 5.830951894845301}, "teller.PredictionInterval.fit": {"tf": 4.242640687119285}, "teller.PredictionInterval.predict": {"tf": 4.69041575982343}, "teller.PredictionInterval.set_predict_request": {"tf": 3.1622776601683795}, "teller.PredictionInterval.set_score_request": {"tf": 3.1622776601683795}, "teller.explainer.Comparator.__init__": {"tf": 3.4641016151377544}, "teller.explainer.Comparator.summary": {"tf": 3.1622776601683795}, "teller.explainer.Explainer.__init__": {"tf": 5.656854249492381}, "teller.explainer.Explainer.fit": {"tf": 8.888194417315589}, "teller.explainer.Explainer.summary": {"tf": 3.1622776601683795}, "teller.explainer.Explainer.plot": {"tf": 3.7416573867739413}, "teller.explainer.Explainer.get_individual_effects": {"tf": 3.1622776601683795}, "teller.explainer.Explainer.set_fit_request": {"tf": 3.1622776601683795}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 4.242640687119285}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 4.242640687119285}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 4.242640687119285}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 4.242640687119285}, "teller.nonconformist.RegressorAdapter.__init__": {"tf": 4}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorNc.__init__": {"tf": 7.280109889280518}, "teller.nonconformist.RegressorNc.predict": {"tf": 5.0990195135927845}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 4}, "teller.nonconformist.RegressorNormalizer.fit": {"tf": 4.242640687119285}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 4.69041575982343}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 3.1622776601683795}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 4}, "teller.nonconformist.IcpRegressor.predict": {"tf": 4.69041575982343}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 3.1622776601683795}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 3.1622776601683795}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 5.830951894845301}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 4.242640687119285}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 4.69041575982343}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 3.1622776601683795}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 3.1622776601683795}, "teller.utils.deepcopy": {"tf": 3.1622776601683795}, "teller.utils.memoize": {"tf": 4.242640687119285}, "teller.utils.diff_list": {"tf": 3.7416573867739413}, "teller.utils.merge_two_dicts": {"tf": 3.7416573867739413}, "teller.utils.flatten": {"tf": 3.1622776601683795}, "teller.utils.is_factor": {"tf": 3.1622776601683795}, "teller.utils.tuple_insert": {"tf": 4.242640687119285}, "teller.utils.numerical_gradient": {"tf": 6.782329983125268}, "teller.utils.numerical_interactions": {"tf": 6.164414002968976}, "teller.utils.numerical_gradient_jackknife": {"tf": 6.782329983125268}, "teller.utils.numerical_interactions_jackknife": {"tf": 7.3484692283495345}, "teller.utils.numerical_gradient_gaussian": {"tf": 6.782329983125268}, "teller.utils.numerical_interactions_gaussian": {"tf": 7.3484692283495345}, "teller.utils.get_code_pval": {"tf": 3.1622776601683795}, "teller.utils.Progbar.__init__": {"tf": 6.324555320336759}, "teller.utils.Progbar.update": {"tf": 4.69041575982343}, "teller.utils.Progbar.add": {"tf": 4.69041575982343}, "teller.utils.score_regression": {"tf": 5.656854249492381}, "teller.utils.score_classification": {"tf": 5.656854249492381}, "teller.utils.t_test": {"tf": 6.928203230275509}, "teller.utils.var_test": {"tf": 6.324555320336759}, "teller.utils.deepcopy.deepcopy": {"tf": 3.1622776601683795}, "teller.utils.memoize.memoize": {"tf": 4.242640687119285}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 6.782329983125268}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 6.164414002968976}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 3.1622776601683795}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 6.782329983125268}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 3.1622776601683795}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 6.782329983125268}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 3.1622776601683795}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 7.3484692283495345}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 3.1622776601683795}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 7.3484692283495345}, "teller.utils.t_test.t_test": {"tf": 6.928203230275509}, "teller.utils.var_test.var_test": {"tf": 6.324555320336759}}, "df": 82, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"1": {"docs": {"teller.Comparator.__init__": {"tf": 1}, "teller.explainer.Comparator.__init__": {"tf": 1}}, "df": 2}, "2": {"docs": {"teller.Comparator.__init__": {"tf": 1}, "teller.explainer.Comparator.__init__": {"tf": 1}}, "df": 2}, "docs": {"teller.Explainer.__init__": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"teller.Comparator.summary": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.Explainer.plot": {"tf": 1}, "teller.Explainer.get_individual_effects": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.summary": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.get_individual_effects": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}, "teller.utils.Progbar.add": {"tf": 1}}, "df": 24}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.PredictionInterval.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"teller.utils.diff_list": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 4}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.PredictionInterval.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 4}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.Progbar.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {"teller.Explainer.__init__": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.Progbar.add": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}}, "df": 13, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.__init__": {"tf": 1}, "teller.Explainer.fit": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 1}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.utils.numerical_gradient": {"tf": 1.4142135623730951}, "teller.utils.numerical_interactions": {"tf": 1.4142135623730951}, "teller.utils.numerical_gradient_jackknife": {"tf": 1.4142135623730951}, "teller.utils.numerical_interactions_jackknife": {"tf": 1.4142135623730951}, "teller.utils.numerical_gradient_gaussian": {"tf": 1.4142135623730951}, "teller.utils.numerical_interactions_gaussian": {"tf": 1.4142135623730951}, "teller.utils.Progbar.__init__": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}, "teller.utils.Progbar.add": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1.4142135623730951}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1.4142135623730951}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1.4142135623730951}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1.4142135623730951}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1.4142135623730951}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1.4142135623730951}}, "df": 27}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.__init__": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}}, "df": 8, "r": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}}, "df": 2}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 1}}, "df": 5}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.__init__": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}}, "df": 12}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}}}}}}, "y": {"docs": {"teller.Explainer.__init__": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.utils.merge_two_dicts": {"tf": 1}, "teller.utils.is_factor": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}, "teller.utils.t_test": {"tf": 1}, "teller.utils.var_test": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 18}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.__init__": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "l": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.IcpRegressor.__init__": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {"teller.utils.t_test": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {"teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}}, "df": 12, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.__init__": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer.__init__": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.t_test": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}}, "df": 12}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.diff_list": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "teller.utils.memoize": {"tf": 1}, "teller.utils.memoize.memoize": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.IcpRegressor.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "x": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.utils.deepcopy": {"tf": 1}, "teller.utils.merge_two_dicts": {"tf": 1}, "teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}, "teller.utils.t_test": {"tf": 1}, "teller.utils.var_test": {"tf": 1}, "teller.utils.deepcopy.deepcopy": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 31}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.Progbar.__init__": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.memoize": {"tf": 1}, "teller.utils.memoize.memoize": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {"teller.utils.t_test": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.t_test": {"tf": 1}, "teller.utils.var_test": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 4}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {"teller.utils.tuple_insert": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.Progbar.__init__": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {"teller.utils.flatten": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval.__init__": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.t_test": {"tf": 1}, "teller.utils.var_test": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 16}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.t_test": {"tf": 1}, "teller.utils.var_test": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 4}}}, "t": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.diff_list": {"tf": 1.4142135623730951}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.Progbar.__init__": {"tf": 1}}, "df": 1}}}}}}}, "x": {"1": {"docs": {"teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}}, "df": 6}, "2": {"docs": {"teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}}, "df": 6}, "docs": {}, "df": 0}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"teller.utils.Progbar.__init__": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"teller.utils.var_test": {"tf": 1}, "teller.utils.var_test.var_test": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}}, "df": 2}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.RegressorAdapter.__init__": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.tuple_insert": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.tuple_insert": {"tf": 1}}, "df": 1}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.t_test": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"teller.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {"teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}}, "df": 12}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.numerical_gradient": {"tf": 1}, "teller.utils.numerical_interactions_jackknife": {"tf": 1}, "teller.utils.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.Progbar.__init__": {"tf": 1}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1}}, "df": 7}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.Progbar.update": {"tf": 1}, "teller.utils.Progbar.add": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {"teller.utils.t_test": {"tf": 1}, "teller.utils.t_test.t_test": {"tf": 1}}, "df": 2}}}, "k": {"docs": {"teller.utils.numerical_interactions": {"tf": 1}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1}}, "df": 2, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 2}}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"teller.Comparator": {"tf": 1}, "teller.Explainer": {"tf": 1}, "teller.PredictionInterval": {"tf": 1.4142135623730951}, "teller.explainer.Comparator": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.Comparator": {"tf": 1}, "teller.Explainer": {"tf": 1}, "teller.PredictionInterval": {"tf": 1.4142135623730951}, "teller.explainer.Comparator": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}}, "df": 8, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.Comparator": {"tf": 1}, "teller.Explainer": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 6}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}}}}}}, "c": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}, "doc": {"root": {"0": {"1": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}}, "df": 4}, "2": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}}, "df": 2}, "3": {"6": {"2": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "5": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}, "docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 2.8284271247461903}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 2.8284271247461903}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "teller.utils.Progbar": {"tf": 1}}, "df": 14}, "1": {"0": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "1": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "4": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "5": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "6": {"0": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 15}, "docs": {}, "df": 0}, "docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 2}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 2}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.utils.Progbar": {"tf": 1}}, "df": 23}, "2": {"0": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "7": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "9": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 2.6457513110645907}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 2.6457513110645907}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 2}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}}, "df": 23}, "3": {"1": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "6": {"2": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}, "docs": {}, "df": 0}, "9": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 2.449489742783178}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 2.449489742783178}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 2}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 18, "d": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2}}, "4": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}, "5": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 1}, "6": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 1}, "8": {"6": {"1": {"7": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 15}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "9": {"5": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}, "9": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"teller": {"tf": 1.7320508075688772}, "teller.Comparator": {"tf": 3.7416573867739413}, "teller.Comparator.__init__": {"tf": 1.7320508075688772}, "teller.Comparator.obj1": {"tf": 1.7320508075688772}, "teller.Comparator.obj2": {"tf": 1.7320508075688772}, "teller.Comparator.summary": {"tf": 3}, "teller.Explainer": {"tf": 3.1622776601683795}, "teller.Explainer.__init__": {"tf": 1.7320508075688772}, "teller.Explainer.obj": {"tf": 1.7320508075688772}, "teller.Explainer.n_jobs": {"tf": 1.7320508075688772}, "teller.Explainer.y_mean_": {"tf": 1.7320508075688772}, "teller.Explainer.effects_": {"tf": 1.7320508075688772}, "teller.Explainer.residuals_": {"tf": 1.7320508075688772}, "teller.Explainer.r_squared_": {"tf": 1.7320508075688772}, "teller.Explainer.adj_r_squared_": {"tf": 1.7320508075688772}, "teller.Explainer.ci_": {"tf": 1.7320508075688772}, "teller.Explainer.ci_inters_": {"tf": 1.7320508075688772}, "teller.Explainer.type_fit": {"tf": 1.7320508075688772}, "teller.Explainer.y_class": {"tf": 1.7320508075688772}, "teller.Explainer.normalize": {"tf": 1.7320508075688772}, "teller.Explainer.type_ci": {"tf": 1.7320508075688772}, "teller.Explainer.col_inters": {"tf": 1.7320508075688772}, "teller.Explainer.fit": {"tf": 4.123105625617661}, "teller.Explainer.summary": {"tf": 3.7416573867739413}, "teller.Explainer.plot": {"tf": 3.1622776601683795}, "teller.Explainer.get_individual_effects": {"tf": 1.7320508075688772}, "teller.Explainer.set_fit_request": {"tf": 9}, "teller.PredictionInterval": {"tf": 3.1622776601683795}, "teller.PredictionInterval.__init__": {"tf": 1.7320508075688772}, "teller.PredictionInterval.obj": {"tf": 1.7320508075688772}, "teller.PredictionInterval.method": {"tf": 1.7320508075688772}, "teller.PredictionInterval.level": {"tf": 1.7320508075688772}, "teller.PredictionInterval.seed": {"tf": 1.7320508075688772}, "teller.PredictionInterval.quantile_": {"tf": 1.7320508075688772}, "teller.PredictionInterval.icp_": {"tf": 1.7320508075688772}, "teller.PredictionInterval.fit": {"tf": 3.605551275463989}, "teller.PredictionInterval.predict": {"tf": 3.1622776601683795}, "teller.PredictionInterval.set_predict_request": {"tf": 9}, "teller.PredictionInterval.set_score_request": {"tf": 9}, "teller.demo": {"tf": 1.7320508075688772}, "teller.explainer": {"tf": 1.7320508075688772}, "teller.explainer.Comparator": {"tf": 3.7416573867739413}, "teller.explainer.Comparator.__init__": {"tf": 1.7320508075688772}, "teller.explainer.Comparator.obj1": {"tf": 1.7320508075688772}, "teller.explainer.Comparator.obj2": {"tf": 1.7320508075688772}, "teller.explainer.Comparator.summary": {"tf": 3}, "teller.explainer.Explainer": {"tf": 3.1622776601683795}, "teller.explainer.Explainer.__init__": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.obj": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.n_jobs": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.y_mean_": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.effects_": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.residuals_": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.r_squared_": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.adj_r_squared_": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.ci_": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.ci_inters_": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.type_fit": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.y_class": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.normalize": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.type_ci": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.col_inters": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.fit": {"tf": 4.123105625617661}, "teller.explainer.Explainer.summary": {"tf": 3.7416573867739413}, "teller.explainer.Explainer.plot": {"tf": 3.1622776601683795}, "teller.explainer.Explainer.get_individual_effects": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.set_fit_request": {"tf": 9}, "teller.nonconformist": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc": {"tf": 3.3166247903554}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 4.358898943540674}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 4.358898943540674}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 3}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 4.358898943540674}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 4.358898943540674}, "teller.nonconformist.RegressorAdapter": {"tf": 21.61018278497431}, "teller.nonconformist.RegressorAdapter.__init__": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 9}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 9}, "teller.nonconformist.RegressorNc": {"tf": 5.916079783099616}, "teller.nonconformist.RegressorNc.__init__": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.predict": {"tf": 5.0990195135927845}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 9}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 9}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 9}, "teller.nonconformist.RegressorNormalizer": {"tf": 21.61018278497431}, "teller.nonconformist.RegressorNormalizer.__init__": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.base_model": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.err_func": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.fit": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.score": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 9}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 9}, "teller.nonconformist.IcpRegressor": {"tf": 22.360679774997898}, "teller.nonconformist.IcpRegressor.__init__": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 4.795831523312719}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 9}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 9}, "teller.predictioninterval": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval": {"tf": 3.1622776601683795}, "teller.predictioninterval.PredictionInterval.__init__": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.obj": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.method": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.level": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.seed": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.quantile_": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.icp_": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 3.605551275463989}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 3.1622776601683795}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 9}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 9}, "teller.utils": {"tf": 1.7320508075688772}, "teller.utils.deepcopy": {"tf": 1.7320508075688772}, "teller.utils.memoize": {"tf": 1.7320508075688772}, "teller.utils.diff_list": {"tf": 1.7320508075688772}, "teller.utils.merge_two_dicts": {"tf": 1.7320508075688772}, "teller.utils.flatten": {"tf": 1.7320508075688772}, "teller.utils.is_factor": {"tf": 1.7320508075688772}, "teller.utils.tuple_insert": {"tf": 1.7320508075688772}, "teller.utils.numerical_gradient": {"tf": 1.7320508075688772}, "teller.utils.numerical_interactions": {"tf": 1.7320508075688772}, "teller.utils.numerical_gradient_jackknife": {"tf": 1.7320508075688772}, "teller.utils.numerical_interactions_jackknife": {"tf": 1.7320508075688772}, "teller.utils.numerical_gradient_gaussian": {"tf": 1.7320508075688772}, "teller.utils.numerical_interactions_gaussian": {"tf": 1.7320508075688772}, "teller.utils.get_code_pval": {"tf": 1.7320508075688772}, "teller.utils.Progbar": {"tf": 3.1622776601683795}, "teller.utils.Progbar.__init__": {"tf": 1.7320508075688772}, "teller.utils.Progbar.target": {"tf": 1.7320508075688772}, "teller.utils.Progbar.width": {"tf": 1.7320508075688772}, "teller.utils.Progbar.verbose": {"tf": 1.7320508075688772}, "teller.utils.Progbar.interval": {"tf": 1.7320508075688772}, "teller.utils.Progbar.update": {"tf": 3.4641016151377544}, "teller.utils.Progbar.add": {"tf": 1.7320508075688772}, "teller.utils.score_regression": {"tf": 1.7320508075688772}, "teller.utils.score_classification": {"tf": 1.7320508075688772}, "teller.utils.t_test": {"tf": 1.4142135623730951}, "teller.utils.var_test": {"tf": 1.4142135623730951}, "teller.utils.deepcopy.deepcopy": {"tf": 1.7320508075688772}, "teller.utils.memoize.memoize": {"tf": 1.7320508075688772}, "teller.utils.numerical_gradient.numerical_gradient": {"tf": 1.7320508075688772}, "teller.utils.numerical_gradient.numerical_interactions": {"tf": 1.7320508075688772}, "teller.utils.numerical_gradient_gaussian.get_code_pval": {"tf": 1.7320508075688772}, "teller.utils.numerical_gradient_gaussian.numerical_gradient_gaussian": {"tf": 1.7320508075688772}, "teller.utils.numerical_gradient_jackknife.get_code_pval": {"tf": 1.7320508075688772}, "teller.utils.numerical_gradient_jackknife.numerical_gradient_jackknife": {"tf": 1.7320508075688772}, "teller.utils.numerical_interactions_gaussian.get_code_pval": {"tf": 1.7320508075688772}, "teller.utils.numerical_interactions_gaussian.numerical_interactions_gaussian": {"tf": 1.7320508075688772}, "teller.utils.numerical_interactions_jackknife.get_code_pval": {"tf": 1.7320508075688772}, "teller.utils.numerical_interactions_jackknife.numerical_interactions_jackknife": {"tf": 1.7320508075688772}, "teller.utils.t_test.t_test": {"tf": 1.7320508075688772}, "teller.utils.var_test.var_test": {"tf": 1.7320508075688772}}, "df": 152, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"teller.Comparator": {"tf": 1}, "teller.Explainer": {"tf": 1.7320508075688772}, "teller.Explainer.summary": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.summary": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 2}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 2}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 27, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.Comparator": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"teller.Comparator": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.Comparator.summary": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 4}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.Comparator": {"tf": 1.4142135623730951}, "teller.Explainer": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 8}}}, "s": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1.7320508075688772}, "teller.PredictionInterval": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 4}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 2}}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {"teller.Explainer.fit": {"tf": 2}, "teller.explainer.Explainer.fit": {"tf": 2}}, "df": 2}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15, "d": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 15}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 2.6457513110645907}}, "df": 1, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 5}}}, "e": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"teller.utils.t_test": {"tf": 1}}, "df": 1, "w": {"docs": {}, "df": 0, "o": {"docs": {"teller.Comparator": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}}, "df": 2}}, "h": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer": {"tf": 1.7320508075688772}, "teller.Explainer.fit": {"tf": 2}, "teller.Explainer.set_fit_request": {"tf": 3.1622776601683795}, "teller.PredictionInterval": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1.7320508075688772}, "teller.PredictionInterval.predict": {"tf": 2}, "teller.PredictionInterval.set_predict_request": {"tf": 3.1622776601683795}, "teller.PredictionInterval.set_score_request": {"tf": 3.1622776601683795}, "teller.explainer.Explainer": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.fit": {"tf": 2}, "teller.explainer.Explainer.set_fit_request": {"tf": 3.1622776601683795}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 2.6457513110645907}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 3.1622776601683795}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 3.1622776601683795}, "teller.nonconformist.IcpRegressor.predict": {"tf": 2.23606797749979}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 3.1622776601683795}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 3.1622776601683795}, "teller.predictioninterval.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 2}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 3.1622776601683795}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 3.1622776601683795}, "teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1.4142135623730951}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 38, "i": {"docs": {}, "df": 0, "r": {"docs": {"teller.Comparator": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 4}}, "m": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "e": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}, "n": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}}, "df": 2}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}}, "df": 18}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}}, "df": 3}}}, "o": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1.7320508075688772}, "teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 27, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.fit": {"tf": 1.7320508075688772}, "teller.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 21}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}}, "df": 6}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.fit": {"tf": 1.7320508075688772}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 2.23606797749979}, "teller.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}, "teller.utils.t_test": {"tf": 1}, "teller.utils.var_test": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2, "s": {"docs": {"teller.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1, "l": {"docs": {"teller.Comparator.summary": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 2.449489742783178}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 7, "s": {"docs": {"teller.Comparator": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.fit": {"tf": 1.7320508075688772}, "teller.Explainer.summary": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1.7320508075688772}, "teller.PredictionInterval": {"tf": 1.4142135623730951}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "teller.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.fit": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.summary": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}}, "df": 23, "s": {"docs": {"teller.Comparator": {"tf": 1.4142135623730951}, "teller.Explainer": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 21}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"teller.utils.Progbar.update": {"tf": 1}}, "df": 1, "s": {"docs": {"teller.utils.Progbar": {"tf": 1.7320508075688772}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {"teller.Explainer.fit": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.fit": {"tf": 1.7320508075688772}}, "df": 2}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.utils.Progbar": {"tf": 1}}, "df": 5}}}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}}, "df": 4}}}}, "{": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "{": {"docs": {}, "df": 0, "q": {"docs": {"teller.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2}}}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"1": {"docs": {"teller.Comparator": {"tf": 1.4142135623730951}, "teller.explainer.Comparator": {"tf": 1.4142135623730951}}, "df": 2}, "2": {"docs": {"teller.Comparator": {"tf": 1.4142135623730951}, "teller.explainer.Comparator": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"teller.Comparator": {"tf": 2}, "teller.Explainer": {"tf": 1.4142135623730951}, "teller.PredictionInterval": {"tf": 1.4142135623730951}, "teller.explainer.Comparator": {"tf": 2}, "teller.explainer.Explainer": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}}, "df": 8}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {"teller.Comparator.summary": {"tf": 1}, "teller.Explainer": {"tf": 1.4142135623730951}, "teller.Explainer.fit": {"tf": 2.6457513110645907}, "teller.Explainer.plot": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 2.23606797749979}, "teller.PredictionInterval": {"tf": 1.4142135623730951}, "teller.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.predict": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 2.23606797749979}, "teller.PredictionInterval.set_score_request": {"tf": 2.23606797749979}, "teller.explainer.Comparator.summary": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 2.6457513110645907}, "teller.explainer.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 2.23606797749979}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 2.23606797749979}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.7320508075688772}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 2.23606797749979}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNc.predict": {"tf": 2.6457513110645907}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 2.23606797749979}, "teller.nonconformist.IcpRegressor": {"tf": 2.23606797749979}, "teller.nonconformist.IcpRegressor.predict": {"tf": 2.449489742783178}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 2.23606797749979}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 2.23606797749979}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 2.23606797749979}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 2.23606797749979}, "teller.utils.Progbar": {"tf": 1.7320508075688772}, "teller.utils.Progbar.update": {"tf": 1.7320508075688772}}, "df": 40}, "n": {"docs": {"teller.Explainer": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"teller.Explainer": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}}, "df": 2}}}, "r": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 10, "g": {"docs": {}, "df": 0, "/": {"3": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}}}}}}}}}}}}}}, "docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2, "s": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}}, "df": 6, "s": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 17, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 2.449489742783178}, "teller.nonconformist.RegressorNormalizer": {"tf": 2.449489742783178}}, "df": 2, "s": {"docs": {"teller.Comparator": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}}, "df": 2}}}}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.summary": {"tf": 1}}, "df": 6}, "d": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 2}}, "df": 4}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer": {"tf": 1.4142135623730951}, "teller.Explainer.fit": {"tf": 2}, "teller.Explainer.plot": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 2}, "teller.explainer.Explainer.plot": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 3}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer.fit": {"tf": 2}, "teller.PredictionInterval": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 2}, "teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 9, "s": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 2.23606797749979}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}}, "df": 8}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 3, "d": {"docs": {"teller.Comparator": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "r": {"docs": {"teller.utils.Progbar": {"tf": 1.4142135623730951}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 2}}, "e": {"docs": {"teller.Explainer": {"tf": 1.4142135623730951}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils.Progbar": {"tf": 1.7320508075688772}, "teller.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 25, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}}, "df": 1}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 3}}, "df": 1}}}}}, "y": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}}, "df": 18}}, "p": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"teller.Comparator": {"tf": 1.4142135623730951}, "teller.Explainer": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 11, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.PredictionInterval": {"tf": 1.7320508075688772}, "teller.PredictionInterval.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 2}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}}, "df": 10, "s": {"docs": {"teller.Comparator": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1.4142135623730951}, "teller.explainer.Comparator": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}}, "df": 6}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 2}}, "s": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"teller.Explainer": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}}, "df": 4}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.Progbar": {"tf": 1.7320508075688772}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"teller.Explainer": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 2.6457513110645907}, "teller.nonconformist.RegressorNormalizer": {"tf": 2.6457513110645907}}, "df": 2, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}}, "df": 1, "s": {"docs": {"teller.Explainer.set_fit_request": {"tf": 2}, "teller.PredictionInterval.set_predict_request": {"tf": 2}, "teller.PredictionInterval.set_score_request": {"tf": 2}, "teller.explainer.Explainer.set_fit_request": {"tf": 2}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 2}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 2}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 2}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 2}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 2}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 2}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 2}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 2}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 2}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 2}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 2}}, "df": 25}}}}}, "s": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2, "s": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}}, "df": 3}}, "s": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.utils.t_test": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 15}}}}}, "i": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2}}, "a": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.Explainer.plot": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 2.23606797749979}, "teller.PredictionInterval": {"tf": 2}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 2.23606797749979}, "teller.PredictionInterval.set_score_request": {"tf": 2.23606797749979}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.summary": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 2.23606797749979}, "teller.nonconformist.IcpRegressor.predict": {"tf": 2}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 2.23606797749979}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 2.23606797749979}, "teller.predictioninterval.PredictionInterval": {"tf": 2}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 2.23606797749979}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 2.23606797749979}, "teller.utils.Progbar": {"tf": 1}}, "df": 31, "t": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2, "s": {"docs": {"teller.Comparator": {"tf": 1}, "teller.Explainer": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 8}}}}}}}}}, "n": {"docs": {"teller.Comparator": {"tf": 1.4142135623730951}, "teller.Explainer": {"tf": 1.7320508075688772}, "teller.PredictionInterval": {"tf": 1.4142135623730951}, "teller.explainer.Comparator": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 8, "d": {"docs": {"teller.Comparator": {"tf": 1.4142135623730951}, "teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval": {"tf": 1.7320508075688772}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1.7320508075688772}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 2}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 2.449489742783178}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 2}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 2.23606797749979}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 36}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"teller.Comparator.summary": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.Explainer.plot": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.summary": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 14}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 4}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"teller.Explainer.fit": {"tf": 1.7320508075688772}, "teller.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.7320508075688772}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.7320508075688772}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.7320508075688772}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter": {"tf": 2}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 2}, "teller.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 15}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 17}}, "v": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 5, "d": {"docs": {"teller.utils.Progbar": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}, "s": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}, "s": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}, "s": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 23}, "l": {"docs": {}, "df": 0, "l": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}}, "df": 5, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"teller.Comparator": {"tf": 1.4142135623730951}, "teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1.7320508075688772}, "teller.PredictionInterval": {"tf": 1.4142135623730951}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "teller.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}, "teller.explainer.Comparator": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}}, "df": 28, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.Comparator": {"tf": 1.4142135623730951}, "teller.Explainer": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.explainer.Comparator": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2, "s": {"docs": {"teller.Explainer": {"tf": 1.4142135623730951}, "teller.Explainer.fit": {"tf": 2.23606797749979}, "teller.PredictionInterval.fit": {"tf": 1.7320508075688772}, "teller.PredictionInterval.predict": {"tf": 1.7320508075688772}, "teller.explainer.Explainer": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 2.23606797749979}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1.7320508075688772}}, "df": 11}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer": {"tf": 1.4142135623730951}, "teller.Explainer.fit": {"tf": 2.8284271247461903}, "teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval": {"tf": 1.4142135623730951}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 2.8284271247461903}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 2.449489742783178}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 2.23606797749979}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 35}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 2.23606797749979}}, "df": 3}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer.set_fit_request": {"tf": 2}, "teller.PredictionInterval.set_predict_request": {"tf": 2}, "teller.PredictionInterval.set_score_request": {"tf": 2}, "teller.explainer.Explainer.set_fit_request": {"tf": 2}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 2}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 2}, "teller.nonconformist.RegressorNc": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 2}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 2}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 2}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 2}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 2}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 2}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 2}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 2}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 2}}, "df": 22}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 7}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 4, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.Comparator.summary": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}, "teller.explainer.Explainer.summary": {"tf": 1}}, "df": 4}}}, "y": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1.7320508075688772}, "teller.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.7320508075688772}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.7320508075688772}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.7320508075688772}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 15}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}}, "df": 21}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 17, "s": {"docs": {"teller.Explainer.fit": {"tf": 2}, "teller.PredictionInterval.fit": {"tf": 2}, "teller.PredictionInterval.predict": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.fit": {"tf": 2}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 2}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 2}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 2}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1.7320508075688772}}, "df": 12}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer.fit": {"tf": 2}, "teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 2}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 17, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.plot": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}}, "df": 5, "s": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 17}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"teller.utils.Progbar.update": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 2, "s": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 6}, "r": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 26, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 2, "d": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 2.6457513110645907}, "teller.nonconformist.RegressorNormalizer": {"tf": 2.6457513110645907}}, "df": 2}}, "m": {"docs": {}, "df": 0, "i": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 2.6457513110645907}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 2.6457513110645907}}, "df": 5}}}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 2.23606797749979}}, "df": 1}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"2": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"teller.Comparator.summary": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}, "teller.explainer.Explainer.summary": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.7320508075688772}, "teller.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "teller.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}}, "df": 15, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 17}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 17}}, "s": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 6}}}}}, "f": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 16}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "o": {"docs": {"teller.utils.var_test": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 2.449489742783178}, "teller.PredictionInterval.fit": {"tf": 2.23606797749979}, "teller.PredictionInterval.predict": {"tf": 2}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 2.449489742783178}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 2}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 2}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 2}, "teller.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 2}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 2.23606797749979}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 2}}, "df": 15, "o": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2, "n": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}}, "df": 1, "e": {"docs": {"teller.Comparator.summary": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.Explainer.summary": {"tf": 1}, "teller.explainer.Comparator.summary": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.summary": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.utils.Progbar": {"tf": 1}}, "df": 11}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc": {"tf": 2}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 2}}, "df": 9}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}}, "df": 2, "d": {"docs": {"teller.Explainer": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}}, "df": 3, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "r": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}, "t": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 17}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.predict": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}, "teller.utils.Progbar": {"tf": 1}}, "df": 9}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.7320508075688772}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.7320508075688772}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}}, "df": 9}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 18, "s": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.fit": {"tf": 2}, "teller.explainer.Explainer.fit": {"tf": 2}}, "df": 2}, "w": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}, "c": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 2.6457513110645907}}, "df": 5}, "p": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 2}, "teller.nonconformist.RegressorNormalizer": {"tf": 2}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 3}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1.4142135623730951}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 3, "n": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.Explainer.summary": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.summary": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 2}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 2}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils.Progbar": {"tf": 1.4142135623730951}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 27, "t": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 2}}, "df": 3, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer": {"tf": 1.4142135623730951}, "teller.PredictionInterval": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}}, "df": 2}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.7320508075688772}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.utils.Progbar": {"tf": 1.4142135623730951}}, "df": 7, "s": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval": {"tf": 1.7320508075688772}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 8}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 3}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}}, "df": 2}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 1, "s": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 3}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"teller.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 2}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.predict": {"tf": 2.23606797749979}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 2}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 2.23606797749979}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 33}, "f": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.Explainer.plot": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 25}, "t": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor": {"tf": 2.449489742783178}}, "df": 3}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}, "x": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 2.8284271247461903}}, "df": 1}}, "c": {"docs": {}, "df": 0, "p": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 2.23606797749979}}, "df": 1, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "y": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1.7320508075688772}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 2}, "teller.nonconformist.RegressorNormalizer": {"tf": 2}, "teller.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 15, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 19}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 6}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 17}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 4}}, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"teller.utils.Progbar": {"tf": 1.4142135623730951}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.Progbar": {"tf": 1.4142135623730951}, "teller.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "{": {"docs": {}, "df": 0, "y": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}}, "df": 1}, "q": {"docs": {"teller.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"teller.Explainer.plot": {"tf": 1}, "teller.explainer.Explainer.plot": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}, "w": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 17}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"teller.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}}, "df": 2, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer": {"tf": 1}, "teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval": {"tf": 1.4142135623730951}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 25}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.nonconformist.AbsErrorErrFunc": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 15}}}}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}}, "df": 9, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.nonconformist": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 4}}, "s": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}}}, "x": {"docs": {"teller.Explainer.fit": {"tf": 2}, "teller.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 2}, "teller.nonconformist.RegressorAdapter": {"tf": 2.8284271247461903}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 2.8284271247461903}, "teller.nonconformist.IcpRegressor": {"tf": 2}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}, "teller.utils.score_regression": {"tf": 1}, "teller.utils.score_classification": {"tf": 1}}, "df": 13}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1.7320508075688772}, "teller.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 6}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.utils.Progbar": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 17}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.PredictionInterval": {"tf": 1}, "teller.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "w": {"docs": {"teller.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}, "teller.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}}, "df": 10, "s": {"docs": {"teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "teller.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"teller.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 1}}}, "t": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.PredictionInterval.predict": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 6}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.Progbar": {"tf": 1.7320508075688772}}, "df": 1}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.PredictionInterval.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}, "teller.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.fit": {"tf": 1}, "teller.utils.Progbar.update": {"tf": 1}}, "df": 7}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.utils.var_test": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"teller.Explainer.fit": {"tf": 1}, "teller.explainer.Explainer.fit": {"tf": 1}, "teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}, "teller.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 6}, "s": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1}, "teller.PredictionInterval.set_predict_request": {"tf": 1}, "teller.PredictionInterval.set_score_request": {"tf": 1}, "teller.explainer.Explainer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 15}, "r": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"teller.PredictionInterval.predict": {"tf": 1}, "teller.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1, "s": {"docs": {"teller.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.nonconformist.RegressorNc": {"tf": 1.7320508075688772}, "teller.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 2}}}}}}}}, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"teller.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 15, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"teller.Explainer.fit": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.fit": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "v": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 5.291502622129181}, "teller.nonconformist.RegressorNormalizer": {"tf": 5.291502622129181}, "teller.nonconformist.IcpRegressor": {"tf": 7.14142842854285}}, "df": 3}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"teller.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "teller.explainer.Explainer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "teller.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "teller.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 15}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"teller.nonconformist.RegressorAdapter": {"tf": 1}, "teller.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"teller.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1}}}}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();